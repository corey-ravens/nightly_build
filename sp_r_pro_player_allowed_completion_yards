USE [Analytics]
GO

/****** Object:  StoredProcedure [dbo].[sp_r_advanced_stats_completion_yards_against_regressed]    Script Date: 5/17/2022 1:05:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







ALTER procedure [dbo].[sp_r_advanced_stats_completion_yards_against_regressed] (@oReturnCD INT OUTPUT) as

/*********************************************************************************

Procedure Name:	sp_r_advanced_stats_completion_yards_against_regressed
Author:			Jeremy Parks
Creation Date:	6/28/2017
Description:       

	This program is to calculate the regressed completion yards against statistic.

	1) Import the Coverage Stats table from SQL
	2) Load the Completion Yards Against Model that was built in another program
	3) Regress values
	4) Assign grades and z scores
	5) Assign percentiles
	6) Append data to the regressed stats table in SQL

			
Input Parameters:
	None
	
Output Parameters:
	None 

Modifications:
Date		SE	Description
---------	--	------------------------------------------------------------------
6/28/2017	JP	Had to specifically load the caret library to get this working.
6/29/2017	JP	Seems to be some issues with ifelse in dplyr and SQL, rewrote the sql 
				query to take care of filter for positions and converting NB to CB.
				Commented out the ifelse.
				 
**********************************************************************************/

BEGIN 


/*

-- For Testing -- Uncomment the temp table creation and insert into that instead.

create table #r_output_regressed_statistics (nfl_player_id INT,
			season INT,
            season_type_adjusted  VARCHAR(255),
            statistic_id FLOAT,
            statistic_denominator INT,
            statistic_value FLOAT,
            statistic_grade FLOAT,
            statistic_percentile FLOAT,
            statistic_z_score FLOAT
			)

*/


-- For testing -- Comment out direct insert and insert into test table 
-- insert into #r_output_regressed_statistics 
insert into r_output_regressed_statistics 
-- Submit the R job to R services.
EXECUTE sp_execute_external_script 
@language = N'R',
@script = N'
#######################################################################################################################
#######################################################################################################################

# This program is to calculate the regressed completion yards against statistic.

# 1) Import the Coverage Stats table from SQL
# 2) Load the Completion Yards Against Model that was built in another program
# 3) Regress values
# 4) Assign grades and z scores
# 5) Assign percentiles
# 6) Append data to the regressed stats table in SQL

#######################################################################################################################
#######################################################################################################################


#######################################################################################################################
#  Library Loading
#######################################################################################################################

# Load the necessary libraries
library(dplyr)
library(data.table)
library(caret)


#######################################################################################################################
# Filter the data
#######################################################################################################################

#Season Filter
data_to_regress <- filter(data_to_regress, season >= 2006)


#######################################################################################################################
# Variable Creation
#######################################################################################################################

#Change NBs to CBs 
# **This is a temporary fix in 11/2017, eventually change the model to use position group blt instead of doing this variable swap-in
data_to_regress$position_blt <- data_to_regress$position_group_blt

#Find the most recent REGULAR season in the dataset
seasons <- data_to_regress %>% 
  filter(season_type_adjusted == "REGPOST") %>%
  summarise(max=max(season))
#max_season <- seasons$max
#max_season <- ifelse(as.integer(format(Sys.Date(), "%m")) >= 2 && as.integer(format(Sys.Date(), "%Y")) >= seasons$max,seasons$max + 1,seasons$max)
max_season <- ifelse(as.integer(format(Sys.Date(), "%m")) >= 2 && as.integer(format(Sys.Date(), "%m")) < 10 && as.integer(format(Sys.Date(), "%Y")) >= seasons$max,seasons$max + 1,seasons$max)

#Hypothesis Test for a Proportion...stat total / square root opportunities go in regression

data_to_regress$play_count_pass_sqrt <- sqrt(data_to_regress$play_count_pass_sum)


data_to_regress$completion_yards_allowed_brv_stat_term <- ifelse(data_to_regress$position_blt=="DS"
                                                                 #,data_to_regress$completion_yards_allowed_brv_safety_sum / data_to_regress$play_count_pass_sqrt #This is for when you can start including secondary targets for safeties
                                                                 ,data_to_regress$completion_yards_allowed_brv_sum / data_to_regress$play_count_pass_sqrt
                                                                 ,data_to_regress$completion_yards_allowed_brv_sum / data_to_regress$play_count_pass_sqrt
)

data_to_regress$completion_yards_allowed_brv <- ifelse(data_to_regress$position_blt=="DS"
                                                       #,data_to_regress$completion_yards_allowed_brv_safety_sum / data_to_regress$play_count_pass_sum #This is for when you can start including secondary targets for safeties
                                                       ,data_to_regress$completion_yards_allowed_brv_sum / data_to_regress$play_count_pass_sum
                                                       ,data_to_regress$completion_yards_allowed_brv_sum / data_to_regress$play_count_pass_sum
)

data_to_regress$completion_yards_allowed_brv_next <- ifelse(data_to_regress$position_blt=="DS"
                                                            #,data_to_regress$completion_yards_allowed_brv_safety_sum_next / data_to_regress$play_count_pass_sum_next #This is for when you can start including secondary targets for safeties
                                                            ,data_to_regress$completion_yards_allowed_brv_sum_next / data_to_regress$play_count_pass_sum_next
                                                            ,data_to_regress$completion_yards_allowed_brv_sum_next / data_to_regress$play_count_pass_sum_next
)


#######################################################################################################################
# Load the previously saved best model
#######################################################################################################################

load(file="R:\\model\\regressed_comp_yds_against_model")


#######################################################################################################################
# Predict the new data
#######################################################################################################################

predictions <- predict(model, data_to_regress, na.action=na.pass)
data_to_regress$statistic_value <- predictions
data_to_regress$statistic_denominator <- data_to_regress$play_count_pass_sum
data_to_regress$statistic_denominator_secondary <- data_to_regress$targeted_defender_primary_sum
data_to_regress$statistic_type <- "completion_yards_against"
data_to_regress$statistic_id <- 5


#######################################################################################################################
# Assign Percentiles, Grades, and Z-Scores
#######################################################################################################################

#Create a new column that has NAs for stat_value if the player hasn"t reached the minimum denominator
data_to_regress$statistic_value_na <- ifelse((data_to_regress$statistic_denominator >= 100 & data_to_regress$statistic_denominator_secondary >= 10) | data_to_regress$statistic_denominator >= 200 | (data_to_regress$statistic_denominator >= 50 & data_to_regress$statistic_denominator_secondary >= 5 & data_to_regress$season_type_adjusted == "PRE"),data_to_regress$statistic_value,NA)

#Create a column that has a 1 if stat_value_na is not NA, 0 if it is NA (you sum this later to get the non NA rows)
data_to_regress$statistic_value_boolean <- ifelse((data_to_regress$statistic_denominator >= 100 & data_to_regress$statistic_denominator_secondary >= 10) | data_to_regress$statistic_denominator >= 200 | (data_to_regress$statistic_denominator >= 50 & data_to_regress$statistic_denominator_secondary >= 5 & data_to_regress$season_type_adjusted == "PRE"),1,0)

#Find the non NA position counts
position_counts <- data_to_regress %>% 
  group_by(season, rolling_game_stats, season_type_adjusted, position_blt) %>% 
  summarise(row_count=sum(statistic_value_boolean))

#Change the data frame to a data table
data_to_regress <- as.data.table(data_to_regress)

#Rank the stat_value_na
data_to_regress[,statistic_rank:=rank(statistic_value_na, na.last = "keep", ties.method="max"),by=c("season", "rolling_game_stats", "season_type_adjusted", "position_blt")]

#Change the data table back to a data frame
data_to_regress <- as.data.frame(data_to_regress)

#Create a table with the season grade means and st devs
grade_thresholds <- data_to_regress %>%
  filter((statistic_denominator >= 100 & statistic_denominator_secondary >= 10) | statistic_denominator >= 200 | (statistic_denominator >= 50 & statistic_denominator_secondary >= 5 & season_type_adjusted == "PRE")) %>%
  group_by(season, season_type_adjusted, rolling_game_stats, position_blt) %>% 
  summarise(mean_stat = mean(statistic_value, na.rm = TRUE)
            ,stdev_stat = sd(statistic_value, na.rm = TRUE)
  ) 

# Loop through all the rows in the dataset to assign values
for (k in 1:nrow(data_to_regress)) {
  
  position_row <- which(position_counts$position_blt == data_to_regress[k,"position_blt"]
                        & position_counts$season == data_to_regress[k,"season"]
                        & position_counts$rolling_game_stats == data_to_regress[k,"rolling_game_stats"]
                        & position_counts$season_type_adjusted == data_to_regress[k,"season_type_adjusted"]
  )
  
  
  threshold_row <- which(grade_thresholds$season == data_to_regress[k,"season"]
                         & grade_thresholds$season_type_adjusted == data_to_regress[k,"season_type_adjusted"]
                         & grade_thresholds$rolling_game_stats == data_to_regress[k,"rolling_game_stats"]
                         & grade_thresholds$position_blt == data_to_regress[k,"position_blt"]
  )
  
  # Calculate the percentile
  data_to_regress[k,"statistic_percentile"] <- ifelse(!is.na(data_to_regress[k,"statistic_value_na"]), data_to_regress[k,"statistic_rank"] / position_counts[position_row,"row_count"], NA)
  #Reverse the percentile because for now the best is at 0
  data_to_regress[k,"statistic_percentile"] <- 1 - data_to_regress[k,"statistic_percentile"]
  
  # Calculate the z score
  data_to_regress[k,"statistic_z_score"] <- ifelse(length(threshold_row) == 0,NA,(data_to_regress[k,"statistic_value"] - grade_thresholds[threshold_row,"mean_stat"]) / grade_thresholds[threshold_row,"stdev_stat"])
  # Flip the sign so positive is better
  data_to_regress[k,"statistic_z_score"] <- data_to_regress[k,"statistic_z_score"] * -1
  
  # Assign the grades
  if(is.na(data_to_regress[k,"statistic_value"])){
    data_to_regress[k,"statistic_grade"] <- NA
  }
  else if(is.na(data_to_regress[k,"statistic_percentile"])){
    data_to_regress[k,"statistic_grade"] <- NA
  }
  else if(data_to_regress[k,"statistic_percentile"] >= .90){
    data_to_regress[k,"statistic_grade"] <- 7 
  }   
  else if(data_to_regress[k,"statistic_percentile"] < .90 & data_to_regress[k,"statistic_percentile"] >= .75){
    data_to_regress[k,"statistic_grade"] <- 6
  }
  else if(data_to_regress[k,"statistic_percentile"] < .75 & data_to_regress[k,"statistic_percentile"] >= .40){
    data_to_regress[k,"statistic_grade"] <- 5
  }
  else if(data_to_regress[k,"statistic_percentile"] < .40 & data_to_regress[k,"statistic_percentile"] >= .10){
    data_to_regress[k,"statistic_grade"] <- 4
  }
  else {
    data_to_regress[k,"statistic_grade"] <- 3
  } 
  
  k <- k + 1
}


#######################################################################################################################
# Write the new data back into an SQL table
#######################################################################################################################

#Take the necessary columns for SQL import
data_to_regress_out <- data_to_regress %>% select(nfl_player_id
                                     ,season
                                     ,season_type_adjusted
                                     ,statistic_id
                                     ,statistic_denominator
                                     ,statistic_value
                                     ,statistic_grade
                                     ,statistic_percentile
                                     ,statistic_z_score
									 ,rolling_game_stats
                                     )

',  
@input_data_1 = N'SELECT *
  FROM [dbo].[r_input_stats_coverage]
  WHERE position_blt in (''CB'', ''NB'', ''DS'')',
@input_data_1_name = N'data_to_regress',
@output_data_1_name = N'data_to_regress_out'
/*

-- If inserting directly into the table, you do not need to define the result set  
WITH RESULT SETS 
			((nfl_player_id INT,
			season INT,
            season_type_adjusted  VARCHAR(255),
            statistic_id FLOAT,
            statistic_denominator INT,
            statistic_value FLOAT,
            statistic_grade FLOAT,
            statistic_percentile FLOAT,
            statistic_z_score FLOAT
			))
*/
			
--r_output_regressed_statistics


END



GO


