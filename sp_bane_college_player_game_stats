USE [AnalyticsDevelopment]
GO

/****** Object:  StoredProcedure [dbo].[sp_bane_college_player_game_stats_20220311]    Script Date: 5/11/2022 12:18:47 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
























ALTER PROCEDURE [dbo].[sp_bane_college_player_game_stats_20220311] (@iSeason INT, @oReturnCD INT OUTPUT) as

/*********************************************************************************

Procedure Name:	college_player_game_advanced_stats
Author:			Corey Krawiec
Creation Date:	10/16/2017
Description:       

	0) Prep tables
	1) Blocking Stats
	2) Run Defense Stats
	3) Coverage Stats
	4) Pass Rush Stats
	5) Receiving Stats
	6) Running Stats
	7) Tackling Stats
	8) Passing Stats
	9) Special Teams Stats
	10) Penalty Stats
	11) Additional game playtimes

				
Input Parameters:
	@iSeason
	
Output Parameters:
	None 

Modifications:
Date         SE           Description

**********************************************************************************/


BEGIN 


	SET @oReturnCD = 0 


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(0)
	
	Create the Cff games table - all the later steps pull from it so that you only get stats for games that aren't in CFF.

	Also create the all star clubs table so you can exclude those games from the NonPro stats.  All Star Games have already been removed from the play level NonPro
	stats so you don't have to specifically exclude them in that part of those steps in this program - just exclude them from the game level NonPro stats steps.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_cff_games exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cff_games') IS NOT NULL
		DROP TABLE #temp_cff_games

	SELECT DISTINCT gsis_game_id
	INTO #temp_cff_games
	FROM [CFFUltimate].[dbo].[plays]


	-- Check if #temp_all_star_clubs exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_all_star_clubs') IS NOT NULL
		DROP TABLE #temp_all_star_clubs

	SELECT ClubKey
	INTO #temp_all_star_clubs
	FROM NonProDB.dbo.Club cl
	LEFT JOIN BaneProductionAnalytics.dbo.schools sc
		ON cl.TeamCode = sc.code
	WHERE cl.Division = 'other'

	
	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(1)

	
	Blocking Stats (as of 10/2017)

    OUTPUT TABLES:            
		bane_college_player_blocking_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_plays_player_pass_block_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_plays_player_pass_block_college') IS NOT NULL
		DROP TABLE #temp_plays_player_pass_block_college

	SELECT pb.gsis_player_id
		,an.season
		,an.gsis_game_key
		,pb.pff_pp_id
		,pb.pff_play_id
		,qb_pressure_allowed
		,qb_sack_allowed
		,qb_hit_allowed
		,qb_hurry_allowed
		,beaten_by_defender
	INTO #temp_plays_player_pass_block_college
	FROM [college_player_play_blocking_facts] pb
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON pb.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_result_facts] res --The play results table
		ON pb.pff_play_id = res.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON pb.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON pb.pff_play_id = ty.pff_play_id
	INNER JOIN [college_play_running_facts] ru --The play run table
		ON pb.pff_play_id = ru.pff_play_id
	INNER JOIN [college_play_penalty_facts] pp --The play penalty table
		ON pb.pff_play_id = pp.pff_play_id
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND penalty_offensive_holding_play = 1))
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND pb.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'



	-- Check if #temp_bane_college_player_blocking_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_blocking_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_blocking_stats

	SELECT pb.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,SUM(CASE WHEN role_pff IN ('PASS BLOCK') THEN 1 ELSE 0 END) AS pass_block_count
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') THEN 1 ELSE 0 END) AS run_block_count
		,SUM(qb_pressure_allowed) AS qb_pressure_allowed_sum
		,SUM(qb_sack_allowed) AS qb_sack_allowed_sum
		,SUM(qb_hit_allowed) AS qb_hit_allowed_sum
		,SUM(qb_hurry_allowed) AS qb_hurry_allowed_sum
		,SUM(CASE WHEN role_pff IN ('PASS BLOCK') THEN beaten_by_defender ELSE 0 END) AS beaten_by_defender_sum
		,SUM(CASE WHEN penalty_offensive_holding = 1 OR penalty_illegal_use_of_hands = 1 THEN 1 ELSE 0 END) AS penalty_sum
		,SUM(CASE WHEN qb_pressure_allowed = 1 OR qb_sack_allowed = 1 OR qb_hit_allowed = 1 OR qb_hurry_allowed = 1 OR (role_pff IN ('PASS BLOCK') AND penalty_offensive_holding = 1) THEN 1 ELSE 0 END) AS disruption_allowed_no_beat_sum
		,SUM(CASE WHEN qb_pressure_allowed = 1 OR qb_sack_allowed = 1 OR qb_hit_allowed = 1 OR qb_hurry_allowed = 1 OR (role_pff IN ('PASS BLOCK') AND (beaten_by_defender = 1 OR penalty_offensive_holding = 1)) THEN 1 ELSE 0 END) AS disruption_allowed_sum
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') AND pff_grade > 0 THEN 1 ELSE 0 END) AS run_block_win_sum
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') AND (pff_comment LIKE '%PBL%' OR pff_comment LIKE '%PBR%') THEN 1 ELSE 0 END) AS play_count_run_block_pull_sum
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') AND (pff_comment LIKE '%PBL%' OR pff_comment LIKE '%PBR%') AND pff_grade > 0 THEN 1 ELSE 0 END) AS run_block_pull_win_sum
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') AND pff_grade <= -1.5 THEN -3.9251967
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade = -1.0 THEN -1.4975551
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade = -0.5 THEN -0.5580605
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade = 0.0 THEN 0.1888047
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade = 0.5 THEN 1.2645362
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade = 1.0 THEN 4.4260029
				WHEN role_pff IN ('RUN BLOCK') AND pff_grade >= 1.5 THEN 10.2192846
				ELSE 0 END) AS running_yards_created_sum
		,SUM(CASE WHEN role_pff IN ('RUN BLOCK') AND pff_grade < 0 THEN 1 ELSE 0 END) AS run_block_loss_sum
		,GETDATE() AS updated_at
		,SUM(CASE WHEN oa.position_blt IN ('LT') THEN 1 ELSE 0 END) AS play_count_lt
		,SUM(CASE WHEN oa.position_blt IN ('LG') THEN 1 ELSE 0 END) AS play_count_lg
		,SUM(CASE WHEN oa.position_blt IN ('OC') THEN 1 ELSE 0 END) AS play_count_oc
		,SUM(CASE WHEN oa.position_blt IN ('RG') THEN 1 ELSE 0 END) AS play_count_rg
		,SUM(CASE WHEN oa.position_blt IN ('RT') THEN 1 ELSE 0 END) AS play_count_rt
		,SUM(CASE WHEN oa.receiver_type IS NOT NULL THEN 1 ELSE 0 END) AS play_count_eligible_receiver
	INTO #temp_bane_college_player_blocking_stats
	FROM #temp_plays_player_pass_block_college pb
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON pb.pff_pp_id = pen.pff_pp_id
	INNER JOIN [college_player_play_offense_alignment_facts] oa --The player position table
		ON pb.pff_pp_id = oa.pff_pp_id
	LEFT JOIN [college_player_play_offense_grade_facts] gof --The player grade table
		ON pb.pff_pp_id = gof.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON pb.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY pb.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_plays_player_pass_block_college
	

--Update any rows that have changed
	UPDATE [bane_college_player_blocking_stats]
	SET player = te.player
		,season = te.season
		,pass_block_count = te.pass_block_count
		,run_block_count = te.run_block_count
		,qb_pressure_allowed_sum = te.qb_pressure_allowed_sum
		,qb_sack_allowed_sum = te.qb_sack_allowed_sum
		,qb_hit_allowed_sum = te.qb_hit_allowed_sum
		,qb_hurry_allowed_sum = te.qb_hurry_allowed_sum
		,beaten_by_defender_sum = te.beaten_by_defender_sum
		,penalty_sum = te.penalty_sum
		,disruption_allowed_no_beat_sum = te.disruption_allowed_no_beat_sum
		,disruption_allowed_sum = te.disruption_allowed_sum
		,run_block_win_sum = te.run_block_win_sum
		,play_count_run_block_pull_sum = te.play_count_run_block_pull_sum
		,run_block_pull_win_sum = te.run_block_pull_win_sum
		,running_yards_created_sum = te.running_yards_created_sum
		,run_block_loss_sum = te.run_block_loss_sum
		,updated_at = te.updated_at
		,play_count_lt = te.play_count_lt
		,play_count_lg = te.play_count_lg
		,play_count_oc = te.play_count_oc
		,play_count_rg = te.play_count_rg
		,play_count_rt = te.play_count_rt
		,play_count_eligible_receiver = te.play_count_eligible_receiver
	FROM #temp_bane_college_player_blocking_stats te
	WHERE [bane_college_player_blocking_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_blocking_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_blocking_stats].pass_block_count <> te.pass_block_count
			OR [bane_college_player_blocking_stats].run_block_count <> te.run_block_count
			OR [bane_college_player_blocking_stats].qb_pressure_allowed_sum <> te.qb_pressure_allowed_sum
			OR [bane_college_player_blocking_stats].qb_sack_allowed_sum <> te.qb_sack_allowed_sum
			OR [bane_college_player_blocking_stats].qb_hit_allowed_sum <> te.qb_hit_allowed_sum
			OR [bane_college_player_blocking_stats].qb_hurry_allowed_sum <> te.qb_hurry_allowed_sum
			OR [bane_college_player_blocking_stats].beaten_by_defender_sum <> te.beaten_by_defender_sum
			OR [bane_college_player_blocking_stats].penalty_sum <> te.penalty_sum
			OR [bane_college_player_blocking_stats].disruption_allowed_no_beat_sum <> te.disruption_allowed_no_beat_sum
			OR [bane_college_player_blocking_stats].disruption_allowed_sum <> te.disruption_allowed_sum
			OR [bane_college_player_blocking_stats].run_block_win_sum <> te.run_block_win_sum
			OR [bane_college_player_blocking_stats].play_count_run_block_pull_sum <> te.play_count_run_block_pull_sum
			OR [bane_college_player_blocking_stats].run_block_pull_win_sum <> te.run_block_pull_win_sum
			OR [bane_college_player_blocking_stats].running_yards_created_sum <> te.running_yards_created_sum
			OR [bane_college_player_blocking_stats].run_block_loss_sum <> te.run_block_loss_sum
			OR ISNULL([bane_college_player_blocking_stats].play_count_lt,0) <> ISNULL(te.play_count_lt,0)
			OR ISNULL([bane_college_player_blocking_stats].play_count_lg,0) <> ISNULL(te.play_count_lg,0)
			OR ISNULL([bane_college_player_blocking_stats].play_count_oc,0) <> ISNULL(te.play_count_oc,0)
			OR ISNULL([bane_college_player_blocking_stats].play_count_rg,0) <> ISNULL(te.play_count_rg,0)
			OR ISNULL([bane_college_player_blocking_stats].play_count_rt,0) <> ISNULL(te.play_count_rt,0)
			OR ISNULL([bane_college_player_blocking_stats].play_count_eligible_receiver,0) <> ISNULL(te.play_count_eligible_receiver,0)
		)


--Insert any new rows
	INSERT INTO [bane_college_player_blocking_stats]
	SELECT te.*
	FROM #temp_bane_college_player_blocking_stats te
	LEFT JOIN [bane_college_player_blocking_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_blocking_stats]
	FROM [bane_college_player_blocking_stats] ba
	LEFT JOIN #temp_bane_college_player_blocking_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_blocking_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(2)

	
	Run Defense Stats (as of 10/2017)

    OUTPUT TABLES:            
		bane_college_player_run_defense_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	-- Check if #temp_plays_player_grade_defense_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_plays_player_grade_defense_college') IS NOT NULL
		DROP TABLE #temp_plays_player_grade_defense_college

	SELECT pg.gsis_player_id
		,an.season
		,an.gsis_game_key
		,pg.pff_pp_id
		,pg.pff_play_id
		,rushing_yards_play
		,pg.pff_grade
		,yardage_adjustment
		,rushing_yards_play_expected
	INTO #temp_plays_player_grade_defense_college
	FROM [college_player_play_defense_grade_facts] pg
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON pg.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON pg.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON pg.pff_play_id = ty.pff_play_id
	INNER JOIN [college_play_result_facts] re --The play results table
		ON pg.pff_play_id = re.pff_play_id
	LEFT JOIN [map_pff_grade_expected_rush_yards_adjustments] ya --The yard adjustment table
		ON pg.pff_grade = ya.pff_grade
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_run = 1
		AND is_two_point_conversion = 0
		AND pg.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'


	-- Check if #temp_bane_college_player_run_defense_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_run_defense_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_run_defense_stats

	SELECT pg.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,COUNT(pg.pff_pp_id) AS run_defense_count
		,SUM(rushing_yards_play) AS rush_yards_allowed_sum
		,SUM(rushing_yards_play + (CASE WHEN pg.pff_grade IS NULL THEN 0 ELSE yardage_adjustment END) - (CASE WHEN double_teamed_def = 1 THEN 0.3929559 ELSE 0 END)) AS rush_yards_allowed_adjusted_sum	  
		,SUM(rushing_yards_play_expected) AS expected_rush_yards_allowed_sum		  
		,SUM(CASE WHEN rushing_yards_play < rushing_yards_play_expected THEN 1 ELSE 0 END) AS rush_below_expected_allowed_sum
		,SUM(CASE WHEN (rushing_yards_play + (CASE WHEN pg.pff_grade IS NULL THEN 0 ELSE yardage_adjustment END) - (CASE WHEN double_teamed_def = 1 THEN 0.3929559 ELSE 0 END)) < rushing_yards_play_expected THEN 1 ELSE 0 END) AS rush_below_expected_allowed_adjusted_sum
		,SUM(CASE WHEN pg.pff_grade > 0 THEN 1 ELSE 0 END) AS run_defense_win_sum
		,SUM(CASE WHEN pg.pff_grade <= -1.5 THEN -12.5610095
				WHEN pg.pff_grade = -1.0 THEN -2.2789676
				WHEN pg.pff_grade = -0.5 THEN -1.1586418
				WHEN pg.pff_grade = 0.0 THEN 0.0827208
				WHEN pg.pff_grade = 0.5 THEN 0.8720326
				WHEN pg.pff_grade = 1.0 THEN 1.9900306
				WHEN pg.pff_grade > 1.5 THEN 4.5905714
				WHEN pg.pff_grade >= 2.0 THEN 5.429673
		ELSE 0 END) AS running_yards_destroyed_sum
		,SUM(CASE WHEN pg.pff_grade < 0 THEN 1 ELSE 0 END) AS run_defense_loss_sum
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_run_defense_stats
	FROM #temp_plays_player_grade_defense_college pg
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON pg.pff_pp_id = pen.pff_pp_id
	INNER JOIN [college_player_play_tackling_facts] ta --The player tackle table
		ON pg.pff_pp_id = ta.pff_pp_id
	INNER JOIN [college_player_play_defense_alignment_facts] da --The player position table
		ON pg.pff_pp_id = da.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON pg.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY pg.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_plays_player_grade_defense_college


--Update any rows that have changed
	UPDATE [bane_college_player_run_defense_stats]
	SET player = te.player
		,season = te.season
		,run_defense_count = te.run_defense_count
		,rush_yards_allowed_sum = te.rush_yards_allowed_sum
		,rush_yards_allowed_adjusted_sum = te.rush_yards_allowed_adjusted_sum	  
		,expected_rush_yards_allowed_sum = te.expected_rush_yards_allowed_sum
		,rush_below_expected_allowed_sum = te.rush_below_expected_allowed_sum 
		,rush_below_expected_allowed_adjusted_sum = te.rush_below_expected_allowed_adjusted_sum
		,run_defense_win_sum = te.run_defense_win_sum
		,running_yards_destroyed_sum = te.running_yards_destroyed_sum
		,run_defense_loss_sum = te.run_defense_loss_sum
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_run_defense_stats te
	WHERE [bane_college_player_run_defense_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_run_defense_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_run_defense_stats].run_defense_count <> te.run_defense_count
		OR [bane_college_player_run_defense_stats].rush_yards_allowed_sum <> te.rush_yards_allowed_sum
		OR ROUND([bane_college_player_run_defense_stats].rush_yards_allowed_adjusted_sum,1) <> ROUND(te.rush_yards_allowed_adjusted_sum,1)  
		OR ISNULL(ROUND([bane_college_player_run_defense_stats].expected_rush_yards_allowed_sum,1),0) <> ISNULL(ROUND(te.expected_rush_yards_allowed_sum,1),0)
		OR [bane_college_player_run_defense_stats].rush_below_expected_allowed_sum <> te.rush_below_expected_allowed_sum 
		OR [bane_college_player_run_defense_stats].rush_below_expected_allowed_adjusted_sum <> te.rush_below_expected_allowed_adjusted_sum
		OR [bane_college_player_run_defense_stats].run_defense_win_sum <> te.run_defense_win_sum
		OR ROUND([bane_college_player_run_defense_stats].running_yards_destroyed_sum,1) <> ROUND(te.running_yards_destroyed_sum,1)
		OR [bane_college_player_run_defense_stats].run_defense_loss_sum <> te.run_defense_loss_sum
		)


--Insert any new rows
	INSERT INTO [bane_college_player_run_defense_stats]
	SELECT te.*
	FROM #temp_bane_college_player_run_defense_stats te
	LEFT JOIN [bane_college_player_run_defense_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_run_defense_stats]
	FROM [bane_college_player_run_defense_stats] ba
	LEFT JOIN #temp_bane_college_player_run_defense_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_run_defense_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(3)

	
	Coverage Stats (as of 02/2017)

    OUTPUT TABLES:            
		bane_college_player_coverage_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_plays_player_coverage_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_plays_player_coverage_college') IS NOT NULL
		DROP TABLE #temp_plays_player_coverage_college

	SELECT ppas.gsis_player_id
		,an.season
		,an.gsis_game_key
		,ppas.pff_pp_id
		,ppas.pff_play_id
		,targeted_defender_primary
		,targeted_defender_secondary
		,responsible_for_coverage_safety
		,completion_allowed_brv
		,completion_allowed
		,penalty_defensive_holding
		,penalty_defensive_pass_interference
		,penalty_yards_pff_play
		,completion_allowed_brv_safety
		,pass_break_up_brv
		,pass_break_up_pff
		,pass_break_up_play_on_ball
		,interception
		,drop_by_covered_receiver
		,expected_points_allowed_pff
	INTO #temp_plays_player_coverage_college
	FROM [college_player_play_coverage_facts] ppas
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON ppas.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON ppas.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON ppas.pff_play_id = ty.pff_play_id
	INNER JOIN [college_play_penalty_facts] pp --The play penalty table
		ON ppas.pff_play_id = pp.pff_play_id
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON ppas.pff_pp_id = pen.pff_pp_id
	 WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND (penalty_defensive_pass_interference = 1 OR penalty_defensive_holding = 1)))
		AND is_pass = 1
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND ppas.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'


	-- Check if #temp_bane_college_player_coverage_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_coverage_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_coverage_stats

	SELECT ppas.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,SUM(CASE WHEN pd.role_pff = 'COVERAGE' THEN 1 ELSE 0 END) AS play_count_pass_sum
		,SUM(align_in_press) AS play_count_press_sum
		,SUM(targeted_defender_primary) AS targeted_defender_primary_sum
		,SUM(targeted_defender_secondary) AS targeted_defender_secondary_sum
		,SUM(CASE WHEN targeted_defender_primary = 1 OR targeted_defender_secondary = 1 THEN 1 ELSE 0 END) AS targeted_defender_sum
		,SUM(responsible_for_coverage_safety) AS responsible_for_coverage_safety_sum
		,SUM(completion_allowed) AS completion_allowed_sum
		,SUM(CASE WHEN  completion_allowed = 1 THEN receiving_yards_play ELSE 0 END) AS completion_yards_allowed_sum
		,SUM(completion_allowed_brv) AS completion_allowed_brv_sum
		,SUM(CASE WHEN completion_allowed_brv = 1 AND penalty_defensive_holding = 1 THEN 5
			WHEN completion_allowed_brv = 1 AND penalty_defensive_pass_interference = 1 THEN penalty_yards_pff_play
			WHEN completion_allowed_brv = 1 AND incompletion_type = 'DROP' THEN air_yards
			WHEN completion_allowed_brv = 1 THEN receiving_yards_play
			ELSE 0 END)
		AS completion_yards_allowed_brv_sum
		,SUM(CASE WHEN pass_break_up_brv = 1 OR interception = 1 THEN 1 ELSE 0 END) AS pass_break_up_brv_sum
		,SUM(CASE WHEN pass_break_up_pff = 1 OR interception = 1 THEN 1 ELSE 0 END) AS pass_break_up_pff_sum
		,SUM(CASE WHEN pass_break_up_play_on_ball = 1 OR interception = 1 THEN 1 ELSE 0 END) AS pass_break_up_play_on_ball_sum 
		,SUM(interception) AS interception_sum 
		,SUM(CASE WHEN interception = 1 THEN 4 WHEN pass_break_up_brv = 1 THEN 1 ELSE 0 END) AS pass_break_up_weighted_sum
		--,SUM(CASE WHEN completion_allowed_brv = 1 AND drop_by_covered_receiver = 0 AND penalty_defensive_holding = 0 AND penalty_defensive_pass_interference = 0 AND yards_after_catch_play_expected IS NOT NULL THEN CASE WHEN yards_after_catch_play <= yards_after_catch_play_expected THEN 1 ELSE 0 END ELSE 0 END) AS yards_after_catch_quick_close_sum  --Excluding the nulls takes care of passes that are a TD that are thrown into the end zone - they shouldn't be included
		--,SUM(CASE WHEN completion_allowed_brv = 1 AND drop_by_covered_receiver = 0 AND penalty_defensive_holding = 0 AND penalty_defensive_pass_interference = 0 AND yards_after_catch_play_expected IS NOT NULL THEN 1 ELSE 0 END) AS yards_after_catch_opportunity_sum
		,SUM(CASE WHEN (completion_allowed = 1 AND (yards_after_catch_play_expected IS NOT NULL OR touchdown_play = 1) AND (yards_after_catch_play > yards_after_catch_play_expected OR touchdown_play = 1)) 
					OR penalty_defensive_holding = 1
					OR penalty_defensive_pass_interference = 1
			THEN 1 
			ELSE 0 
			END)
		AS yards_after_catch_above_expected_sum  
		,SUM(CASE WHEN targeted_defender_primary = 1 AND drop_by_covered_receiver = 0 AND (yards_after_catch_play_expected IS NOT NULL OR touchdown_play = 1 OR pass_result IN  ('INCOMPLETE','INTERCEPTION')) THEN 1 ELSE 0 END) AS yards_after_catch_opportunity_sum
		,SUM(penalty_defensive_pass_interference) AS penalty_defensive_pass_interference_sum
		,SUM(penalty_defensive_holding) AS penalty_defensive_holding_sum
		,SUM(receiving_yards_play) AS team_receiving_yards_allowed_on
		,SUM(rushing_yards_play) AS team_rushing_yards_allowed_on
		,SUM(touchdown_play) AS team_touchdowns_allowed_on
		,SUM(expected_points_allowed_pff) AS expected_points_allowed_pff_sum
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_coverage_stats
	FROM #temp_plays_player_coverage_college ppas
	INNER JOIN [college_play_result_facts] re --The play results table
		ON ppas.pff_play_id = re.pff_play_id
	INNER JOIN [college_play_passing_facts] pa --The play pass table
		ON ppas.pff_play_id = pa.pff_play_id
	INNER JOIN [college_player_play_defense_alignment_facts] pd --The player position table
		ON ppas.pff_pp_id = pd.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ppas.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY ppas.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_plays_player_coverage_college


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(3)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_ints exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_ints') IS NOT NULL
		DROP TABLE #temp_non_pro_ints

	SELECT DISTINCT GameKey
		,PlayID
		,PlayerID
	INTO #temp_non_pro_ints
	FROM daily_build_non_pro_play_stats
	WHERE stat_name IN ('Interception Yards','Interception Yards, TD')


	-- Check if #temp_non_pro_player_play_coverage_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_coverage_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_coverage_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Defensed') AND ii.PlayerID IS NULL THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS pass_break_up_brv_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Defensed') AND ii.PlayerID IS NULL THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS pass_break_up_pff_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Interception Yards','Interception Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS interception_sum 
	INTO #temp_non_pro_player_play_coverage_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_non_pro_ints ii
		ON ps.GameKey = ii.GameKey
		AND ps.PlayID = ii.PlayID
		AND ps.PlayerID = ii.PlayerID
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('Pass Defensed') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Interception Yards','Interception Yards, TD') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_coverage_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_pass_sum
		,NULL AS play_count_press_sum
		,NULL AS targeted_defender_primary_sum
		,NULL AS targeted_defender_secondary_sum
		,NULL AS targeted_defender_sum
		,NULL AS responsible_for_coverage_safety_sum
		,NULL AS completion_allowed_sum
		,NULL AS completion_yards_allowed_sum
		,NULL AS completion_allowed_brv_sum
		,NULL AS completion_yards_allowed_brv_sum
		,SUM(pass_break_up_brv_sum) AS pass_break_up_brv_sum
		,SUM(pass_break_up_pff_sum) AS pass_break_up_pff_sum
		,NULL AS pass_break_up_play_on_ball_sum 
		,SUM(interception_sum) AS interception_sum 
		,NULL AS pass_break_up_weighted_sum
		,NULL AS yards_after_catch_above_expected_sum  
		,NULL AS yards_after_catch_opportunity_sum
		,NULL AS penalty_defensive_pass_interference_sum
		,NULL AS penalty_defensive_holding_sum
		,NULL AS team_receiving_yards_allowed_on
		,NULL AS team_rushing_yards_allowed_on
		,NULL AS team_touchdowns_allowed_on
		,NULL AS expected_points_allowed_pff_sum
		,GETDATE() AS updated_at
	FROM #temp_non_pro_player_play_coverage_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(3)(b)

	
	Add in stats from NonProDB - game level.

	Do this second so you only fill it in for games that don't appear in the play level NonPro Stats.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO #temp_bane_college_player_coverage_stats
	SELECT DISTINCT de.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_pass_sum
		,NULL AS play_count_press_sum
		,NULL AS targeted_defender_primary_sum
		,NULL AS targeted_defender_secondary_sum
		,NULL AS targeted_defender_sum
		,NULL AS responsible_for_coverage_safety_sum
		,NULL AS completion_allowed_sum
		,NULL AS completion_yards_allowed_sum
		,NULL AS completion_allowed_brv_sum
		,NULL AS completion_yards_allowed_brv_sum
		,(PassDefences) AS pass_break_up_brv_sum
		,(PassDefences) AS pass_break_up_pff_sum
		,NULL AS pass_break_up_play_on_ball_sum 
		,(Interceptions) AS interception_sum 
		,NULL AS pass_break_up_weighted_sum
		,NULL AS yards_after_catch_above_expected_sum  
		,NULL AS yards_after_catch_opportunity_sum
		,NULL AS penalty_defensive_pass_interference_sum
		,NULL AS penalty_defensive_holding_sum
		,NULL AS team_receiving_yards_allowed_on
		,NULL AS team_rushing_yards_allowed_on
		,NULL AS team_touchdowns_allowed_on
		,NULL AS expected_points_allowed_pff_sum
		,GETDATE() AS updated_at
	FROM NonProDB.dbo.Defensive de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_coverage_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND (de.PassDefences > 0 OR de.Interceptions > 0)
		AND ac.ClubKey IS NULL


	DROP TABLE #temp_non_pro_player_play_coverage_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(3)(c)

	
	Update/add to/delete from the Bane coverage table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--Update any rows that have changed
	UPDATE [bane_college_player_coverage_stats]
	SET player = te.player
		,season = te.season
		,play_count_pass_sum = te.play_count_pass_sum
		,play_count_press_sum = te.play_count_press_sum
		,targeted_defender_primary_sum = te.targeted_defender_primary_sum
		,targeted_defender_secondary_sum = te.targeted_defender_secondary_sum
		,targeted_defender_sum = te.targeted_defender_sum
		,responsible_for_coverage_safety_sum = te.responsible_for_coverage_safety_sum
		,completion_allowed_sum = te.completion_allowed_sum
		,completion_yards_allowed_sum = te.completion_yards_allowed_sum
		,completion_allowed_brv_sum = te.completion_allowed_brv_sum
		,completion_yards_allowed_brv_sum = te.completion_yards_allowed_brv_sum
		,pass_break_up_brv_sum = te.pass_break_up_brv_sum
		,pass_break_up_pff_sum = te.pass_break_up_pff_sum
		,pass_break_up_play_on_ball_sum = te.pass_break_up_play_on_ball_sum
		,interception_sum = te.interception_sum
		,pass_break_up_weighted_sum = te.pass_break_up_weighted_sum
		,yards_after_catch_above_expected_sum = te.yards_after_catch_above_expected_sum  
		,yards_after_catch_opportunity_sum = te.yards_after_catch_opportunity_sum
		,penalty_defensive_pass_interference_sum = te.penalty_defensive_pass_interference_sum
		,penalty_defensive_holding_sum = te.penalty_defensive_holding_sum
		,team_receiving_yards_allowed_on = te.team_receiving_yards_allowed_on
		,team_rushing_yards_allowed_on = te.team_rushing_yards_allowed_on
		,team_touchdowns_allowed_on = te.team_touchdowns_allowed_on
		,expected_points_allowed_pff_sum = te.expected_points_allowed_pff_sum
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_coverage_stats te
	WHERE [bane_college_player_coverage_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_coverage_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_coverage_stats].play_count_pass_sum <> te.play_count_pass_sum
		OR [bane_college_player_coverage_stats].play_count_press_sum <> te.play_count_press_sum
		OR [bane_college_player_coverage_stats].targeted_defender_primary_sum <> te.targeted_defender_primary_sum
		OR [bane_college_player_coverage_stats].targeted_defender_secondary_sum <> te.targeted_defender_secondary_sum
		OR [bane_college_player_coverage_stats].targeted_defender_sum <> te.targeted_defender_sum
		OR [bane_college_player_coverage_stats].responsible_for_coverage_safety_sum <> te.responsible_for_coverage_safety_sum
		OR [bane_college_player_coverage_stats].completion_allowed_sum <> te.completion_allowed_sum
		OR [bane_college_player_coverage_stats].completion_yards_allowed_sum <> te.completion_yards_allowed_sum
		OR [bane_college_player_coverage_stats].completion_allowed_brv_sum <> te.completion_allowed_brv_sum
		OR [bane_college_player_coverage_stats].completion_yards_allowed_brv_sum <> te.completion_yards_allowed_brv_sum
		OR [bane_college_player_coverage_stats].pass_break_up_brv_sum <> te.pass_break_up_brv_sum
		OR [bane_college_player_coverage_stats].pass_break_up_pff_sum <> te.pass_break_up_pff_sum
		OR [bane_college_player_coverage_stats].pass_break_up_play_on_ball_sum <> te.pass_break_up_play_on_ball_sum
		OR [bane_college_player_coverage_stats].interception_sum <> te.interception_sum
		OR [bane_college_player_coverage_stats].pass_break_up_weighted_sum <> te.pass_break_up_weighted_sum
		OR [bane_college_player_coverage_stats].yards_after_catch_above_expected_sum <> te.yards_after_catch_above_expected_sum
		OR [bane_college_player_coverage_stats].yards_after_catch_opportunity_sum <> te.yards_after_catch_opportunity_sum
		OR ISNULL([bane_college_player_coverage_stats].penalty_defensive_pass_interference_sum,0) <> ISNULL(te.penalty_defensive_pass_interference_sum,0)
		OR ISNULL([bane_college_player_coverage_stats].penalty_defensive_holding_sum,0) <> ISNULL(te.penalty_defensive_holding_sum,0)
		OR [bane_college_player_coverage_stats].team_receiving_yards_allowed_on <> te.team_receiving_yards_allowed_on
		OR [bane_college_player_coverage_stats].team_rushing_yards_allowed_on <> te.team_rushing_yards_allowed_on
		OR [bane_college_player_coverage_stats].team_touchdowns_allowed_on <> te.team_touchdowns_allowed_on
		OR ABS([bane_college_player_coverage_stats].expected_points_allowed_pff_sum - te.expected_points_allowed_pff_sum) > 0.05
		)


--Insert any new rows
	INSERT INTO [bane_college_player_coverage_stats]
	SELECT te.*
	FROM #temp_bane_college_player_coverage_stats te
	LEFT JOIN [bane_college_player_coverage_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_coverage_stats]
	FROM [bane_college_player_coverage_stats] ba
	LEFT JOIN #temp_bane_college_player_coverage_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_coverage_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(4)

	
	Pass Rush Stats (as of 08/2016)

    OUTPUT TABLES:            
		bane_college_player_pass_rush_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	-- Check if #temp_bane_college_player_pass_rush_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_pass_rush_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_pass_rush_stats

	SELECT pr.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,an.season
		,an.gsis_game_key
		,SUM(CASE WHEN pd.role_pff = 'PASS RUSH' THEN 1 ELSE 0 END) AS play_count_pass_sum
		,SUM(drawn_offensive_holding) AS drawn_offensive_holding_sum
		,SUM(qb_pressure) AS qb_pressure_sum
		,SUM(qb_sack) AS qb_sack_sum
		,SUM(qb_hit) AS qb_hit_sum
		,SUM(qb_hurry) AS qb_hurry_sum
		,SUM(batted_pass) AS batted_pass_sum
		,SUM(CASE WHEN qb_sack = 1 THEN 1
			WHEN qb_hit = 1 THEN 1
			WHEN qb_hurry = 1 THEN 1
			WHEN qb_pressure = 1 THEN 1
			WHEN drawn_offensive_holding = 1 THEN 1
			WHEN batted_pass = 1 THEN 1
			ELSE 0
			END)
		AS qb_disruption_sum
		,SUM(CASE WHEN qb_sack = 1 THEN 1
			WHEN qb_hit = 1 THEN 1
			WHEN qb_hurry = 1 THEN 1
			WHEN qb_pressure = 1 THEN 1
			WHEN drawn_offensive_holding = 1 THEN 1
			WHEN batted_pass = 1 THEN 0
			ELSE 0
			END)
		AS qb_disruption_no_batted_pass_sum
		,SUM(CASE WHEN qb_sack = 1 THEN 1
			WHEN drawn_offensive_holding = 1 THEN 1
			WHEN qb_hit = 1 THEN 0.75
			WHEN qb_hurry = 1 THEN 0.75
			WHEN qb_pressure = 1 THEN 0.75	
			WHEN batted_pass = 1 THEN 0.5				
			ELSE 0
			END)
		AS qb_disruption_weight_pff_sum
		,SUM(CASE WHEN qb_sack = 1 THEN 4
			WHEN drawn_offensive_holding = 1 THEN 4
			WHEN qb_hit = 1 THEN 1
			WHEN qb_hurry = 1 THEN 1
			WHEN qb_pressure = 1 THEN 1	
			WHEN batted_pass = 1 THEN 0.5				
			ELSE 0
			END)
		AS qb_disruption_weight_4_sum
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_pass_rush_stats
	FROM [college_player_play_pass_rush_facts] pr
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON pr.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON pr.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON pr.pff_play_id = ty.pff_play_id
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON pr.pff_pp_id = pen.pff_pp_id
	INNER JOIN [college_player_play_defense_alignment_facts] pd --The player play alignment table
		ON pr.pff_pp_id = pd.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON pr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	 WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND (penalty_defensive_pass_interference = 1 OR penalty_defensive_holding = 1 OR drawn_offensive_holding = 1)))
		AND is_pass = 1
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		--AND (unblocked = 0 OR unblocked IS NULL)
		--AND (clean_up_pressure = 0 OR clean_up_pressure IS NULL)
		--AND (pursuit_pressure = 0 OR pursuit_pressure IS NULL)
		AND is_two_point_conversion = 0
		AND pr.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'
	GROUP BY pr.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,an.season
		,an.gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(4)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_sacks exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_sacks') IS NOT NULL
		DROP TABLE #temp_non_pro_sacks

	SELECT DISTINCT GameKey
		,PlayID
		,PlayerID
	INTO #temp_non_pro_sacks
	FROM daily_build_non_pro_play_stats
	WHERE stat_name IN ('1/2 Sack Yards (Defense)','Sack Yards (Defense)')


	-- Check if #temp_non_pro_player_play_pass_rush_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_pass_rush_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_pass_rush_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('1/2 Sack Yards (Defense)','Sack Yards (Defense)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS qb_sack_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Quarterback Hit') AND sa.PlayerID IS NULL THEN 1 ELSE 0 END)  >= 1 THEN 1 ELSE 0 END AS qb_hit_sum
	INTO #temp_non_pro_player_play_pass_rush_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_non_pro_sacks sa
		ON ps.GameKey = sa.GameKey
		AND ps.PlayID = sa.PlayID
		AND ps.PlayerID = sa.PlayerID
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('1/2 Sack Yards (Defense)','Sack Yards (Defense)') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Quarterback Hit') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_pass_rush_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_pass_sum
		,NULL AS drawn_offensive_holding_sum
		,NULL AS qb_pressure_sum
		,SUM(qb_sack_sum) AS qb_sack_sum
		,SUM(qb_hit_sum) AS qb_hit_sum
		,NULL AS qb_hurry_sum
		,NULL AS batted_pass_sum
		,NULL AS qb_disruption_sum
		,NULL AS qb_disruption_no_batted_pass_sum
		,NULL AS qb_disruption_weight_pff_sum
		,NULL AS qb_disruption_weight_4_sum
		,GETDATE() AS updated_at
	FROM #temp_non_pro_player_play_pass_rush_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(4)(b)

	
	Add in stats from NonProDB - game level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO #temp_bane_college_player_pass_rush_stats
	SELECT DISTINCT de.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_pass_sum
		,NULL AS drawn_offensive_holding_sum
		,NULL AS qb_pressure_sum
		,CEILING(Sacks) AS qb_sack_sum
		,CEILING(QuarterbackHits) AS qb_hit_sum
		,NULL AS qb_hurry_sum
		,NULL AS batted_pass_sum
		,NULL AS qb_disruption_sum
		,NULL AS qb_disruption_no_batted_pass_sum
		,NULL AS qb_disruption_weight_pff_sum
		,NULL AS qb_disruption_weight_4_sum
		,GETDATE() AS updated_at
	FROM NonProDB.dbo.Defensive de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_pass_rush_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND (de.Sacks > 0 OR de.QuarterbackHits > 0)
		AND ac.ClubKey IS NULL


	DROP TABLE #temp_non_pro_player_play_pass_rush_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(4)(c)

	
	Update/add to/delete from the Bane pass rush table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
--Update any rows that have changed
	UPDATE [bane_college_player_pass_rush_stats]
	SET player = te.player
		,season = te.season
		,play_count_pass_sum = te.play_count_pass_sum
		,drawn_offensive_holding_sum = te.drawn_offensive_holding_sum
		,qb_pressure_sum = te.qb_pressure_sum
		,qb_sack_sum = te.qb_sack_sum
		,qb_hit_sum = te.qb_hit_sum
		,qb_hurry_sum = te.qb_hurry_sum
		,batted_pass_sum = te.batted_pass_sum
		,qb_disruption_sum = te.qb_disruption_sum
		,qb_disruption_no_batted_pass_sum = te.qb_disruption_no_batted_pass_sum
		,qb_disruption_weight_pff_sum = te.qb_disruption_weight_pff_sum
		,qb_disruption_weight_4_sum = te.qb_disruption_weight_4_sum
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_pass_rush_stats te
	WHERE [bane_college_player_pass_rush_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_pass_rush_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_pass_rush_stats].play_count_pass_sum <> te.play_count_pass_sum
		OR ISNULL([bane_college_player_pass_rush_stats].drawn_offensive_holding_sum,0) <> ISNULL(te.drawn_offensive_holding_sum,0)
		OR [bane_college_player_pass_rush_stats].qb_pressure_sum <> te.qb_pressure_sum
		OR [bane_college_player_pass_rush_stats].qb_sack_sum <> te.qb_sack_sum
		OR [bane_college_player_pass_rush_stats].qb_hit_sum <> te.qb_hit_sum
		OR [bane_college_player_pass_rush_stats].qb_hurry_sum <> te.qb_hurry_sum
		OR [bane_college_player_pass_rush_stats].batted_pass_sum <> te.batted_pass_sum
		OR [bane_college_player_pass_rush_stats].qb_disruption_sum <> te.qb_disruption_sum
		OR [bane_college_player_pass_rush_stats].qb_disruption_no_batted_pass_sum <> te.qb_disruption_no_batted_pass_sum
		OR [bane_college_player_pass_rush_stats].qb_disruption_weight_pff_sum <> te.qb_disruption_weight_pff_sum
		OR [bane_college_player_pass_rush_stats].qb_disruption_weight_4_sum <> te.qb_disruption_weight_4_sum
		)


--Insert any new rows
	INSERT INTO [bane_college_player_pass_rush_stats]
	SELECT te.*
	FROM #temp_bane_college_player_pass_rush_stats te
	LEFT JOIN [bane_college_player_pass_rush_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_pass_rush_stats]
	FROM [bane_college_player_pass_rush_stats] ba
	LEFT JOIN #temp_bane_college_player_pass_rush_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_pass_rush_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(5)

	
	Receiving Stats

    OUTPUT TABLES:            
		bane_college_player_receiving_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_player_receiving_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_player_receiving_college') IS NOT NULL
		DROP TABLE #temp_player_receiving_college

	SELECT rec.gsis_player_id
		,an.season
		,an.gsis_game_key
		,rec.pff_play_id
		,rec.pff_pp_id
		,is_no_play
		,targeted_receiver
		,targeted_receiver_catchable
		,dropped_pass
		,reception
		,receiving_yards
		,receiving_yards_after_catch
		,receiving_yards_after_contact
		,receiving_fumble
		,receiving_touchdown
		,receiving_tackle_avoided
		,receiving_interception
		,air_yards
		,penalty_yards_pff_play
		,catch_probability
		,expected_points_change_play
	INTO #temp_player_receiving_college
	FROM [college_player_play_receiving_facts] rec
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON rec.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_result_facts] res --The play results table
		ON rec.pff_play_id = res.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON rec.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON rec.pff_play_id = ty.pff_play_id
	INNER JOIN [college_play_penalty_facts] pp --The play penalty table
		ON rec.pff_play_id = pp.pff_play_id
	INNER JOIN [college_play_passing_facts] pa --The play pass table
		ON rec.pff_play_id = pa.pff_play_id
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND (penalty_defensive_pass_interference_play = 1 OR penalty_defensive_holding_play = 1 OR penalty_illegal_contact_play = 1)))
		AND is_pass = 1
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND rec.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'


	-- Check if #temp_bane_college_player_receiving_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_receiving_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_receiving_stats

	SELECT rec.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,SUM(CASE WHEN role_pff = 'PASS ROUTE' THEN 1 ELSE 0 END) AS play_count_route_sum
		,SUM(pressed) AS play_count_pressed_sum
		,SUM(CASE WHEN targeted_receiver = 1 THEN 1 ELSE 0 END) AS target_sum
		,SUM(CASE WHEN targeted_receiver_catchable = 1 THEN 1 ELSE 0 END) AS catchable_target_sum
		,SUM(dropped_pass) AS drop_sum
		,SUM(reception) AS reception_sum
		,SUM(receiving_yards) AS receiving_yards_sum
		,SUM(receiving_yards_after_catch) AS receiving_yards_after_catch_sum
		,SUM(receiving_yards_after_contact) AS receiving_yards_after_contact_sum
		,SUM(receiving_fumble) AS receiving_fumble
		,SUM(receiving_touchdown) AS receiving_touchdown_sum
		,SUM(receiving_tackle_avoided) AS receiving_tackle_avoided_sum
		,SUM(receiving_interception) AS receiving_interception_sum
		,SUM(receiving_yards) + 20*SUM(receiving_touchdown) AS receiving_yards_adjusted_sum
		,SUM(receiving_yards) + 20*SUM(receiving_touchdown) - 45*SUM(receiving_interception) AS receiving_yards_adjusted_with_int_sum
		,SUM(CASE WHEN (drawn_defensive_holding = 1 OR drawn_illegal_contact = 1) AND penalty_yards_pff_play > 5 THEN 5
				WHEN drawn_penalty_pff = 1 AND penalty_yards_pff_play > 0 THEN penalty_yards_pff_play 
				ELSE 0 
			END) 
		AS penalty_yards_drawn_sum
		,SUM(CASE WHEN targeted_receiver = 1 AND is_no_play = 0 AND catch_probability IS NOT NULL THEN 1 ELSE 0 END) AS catch_probability_target_sum
		,SUM(CASE WHEN targeted_receiver = 1 AND is_no_play = 0 THEN catch_probability ELSE 0 END) AS catch_probability_sum
		,SUM(CASE WHEN targeted_receiver_catchable = 1 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play IS NOT NULL THEN 1 ELSE 0 END) AS receiving_epa_target_sum
		,SUM(CASE WHEN targeted_receiver_catchable = 1 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) THEN expected_points_change_play ELSE 0 END) AS receiving_epa_sum
		,SUM(CASE WHEN targeted_receiver = 1 THEN air_yards ELSE 0 END) AS receiving_air_yards_sum
		,NULL AS catch_probability_derrick_target_sum
		,NULL AS catch_probability_derrick_sum
		--,SUM(CASE WHEN targeted_receiver = 1 AND is_no_play = 0 AND catch_probability_derrick IS NOT NULL THEN 1 ELSE 0 END) AS catch_probability_derrick_target_sum
		--,SUM(CASE WHEN targeted_receiver = 1 AND is_no_play = 0  THEN catch_probability_derrick ELSE 0 END) AS catch_probability_derrick_sum
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_receiving_stats
	FROM #temp_player_receiving_college rec
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON rec.pff_pp_id = pen.pff_pp_id
	INNER JOIN [college_player_play_offense_alignment_facts] oa --The player position table
		ON rec.pff_pp_id = oa.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON rec.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY rec.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_player_receiving_college


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(5)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_player_play_receiving_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_receiving_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_receiving_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Target') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS target_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Reception Yards','Pass Reception Yards, TD') THEN 1 ELSE 0 END)  >= 1 THEN 1 ELSE 0 END AS reception_sum
		,MAX(CASE WHEN stat_name IN ('Pass Reception Yards','Pass Reception Yards, TD') THEN Yards ELSE 0 END) AS receiving_yards_sum
		,MAX(CASE WHEN stat_name IN ('Yardage Gained After the Catch') AND category_name IN ('Pass Receiving') AND bad_pass_length_flag = 0 THEN Yards ELSE 0 END) AS receiving_yards_after_catch_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Reception Yards','Pass Reception Yards, TD') AND fumble_play = 1 THEN 1 ELSE 0 END)  >= 1 THEN 1 ELSE 0 END AS receiving_fumble
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Reception Yards, TD') THEN 1 ELSE 0 END)  >= 1 THEN 1 ELSE 0 END AS receiving_touchdown_sum
		--,SUM(CASE WHEN stat_name IN ('Pass Target') THEN air_yards ELSE 0 END) AS receiving_air_yards_sum
	INTO #temp_non_pro_player_play_receiving_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('Pass Target') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Pass Reception Yards') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Yardage Gained After the Catch') AND category_name IN ('Pass Receiving') THEN Yards ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Pass Reception Yards') AND fumble_play = 1 THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Pass Reception Yards, TD') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_receiving_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_route_sum
		,NULL AS play_count_pressed_sum
		,CASE WHEN SUM(reception_sum) > SUM(target_sum) THEN SUM(reception_sum) ELSE SUM(target_sum) END AS target_sum
		,NULL AS catchable_target_sum
		,NULL AS drop_sum
		,SUM(reception_sum) AS reception_sum
		,SUM(receiving_yards_sum) AS receiving_yards_sum
		,SUM(receiving_yards_after_catch_sum) AS receiving_yards_after_catch_sum
		,NULL AS receiving_yards_after_contact_sum
		,SUM(receiving_fumble) AS receiving_fumble
		,SUM(receiving_touchdown_sum) AS receiving_touchdown_sum
		,NULL AS receiving_tackle_avoided_sum
		,NULL AS receiving_interception_sum
		,NULL AS receiving_yards_adjusted_sum
		,NULL AS receiving_yards_adjusted_with_int_sum
		,NULL AS penalty_yards_drawn_sum
		,NULL AS catch_probability_target_sum
		,NULL AS catch_probability_sum
		,NULL AS receiving_epa_target_sum
		,NULL AS receiving_epa_sum
		,NULL AS receiving_air_yards_sum
		,NULL AS catch_probability_derrick_target_sum
		,NULL AS catch_probability_derrick_sum
		,GETDATE() AS updated_at
	FROM #temp_non_pro_player_play_receiving_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(5)(b)

	
	Add in stats from NonProDB - game level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO #temp_bane_college_player_receiving_stats
	SELECT de.PlayerID AS gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_route_sum
		,NULL AS play_count_pressed_sum
		,CASE WHEN (Receptions) > (PassTarget) THEN (Receptions) ELSE (PassTarget) END AS target_sum
		,NULL AS catchable_target_sum
		,NULL AS drop_sum
		,(Receptions) AS reception_sum
		,(Yards) AS receiving_yards_sum
		,(YardsAfterCatch) AS receiving_yards_after_catch_sum
		,NULL AS receiving_yards_after_contact_sum
		,NULL AS receiving_fumble
		,(Touchdowns) AS receiving_touchdown_sum
		,NULL AS receiving_tackle_avoided_sum
		,NULL AS receiving_interception_sum
		,NULL AS receiving_yards_adjusted_sum
		,NULL AS receiving_yards_adjusted_with_int_sum
		,NULL AS penalty_yards_drawn_sum
		,NULL AS catch_probability_target_sum
		,NULL AS catch_probability_sum
		,NULL AS receiving_epa_target_sum
		,NULL AS receiving_epa_sum
		,NULL AS receiving_air_yards_sum
		,NULL AS catch_probability_derrick_target_sum
		,NULL AS catch_probability_derrick_sum
		,GETDATE() AS updated_at
	FROM NonProDB.dbo.Receiving de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_receiving_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND ac.ClubKey IS NULL


	DROP TABLE #temp_non_pro_player_play_receiving_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(5)(c)

	
	Update/add to/delete from the Bane receiving table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--Update any rows that have changed
	UPDATE [bane_college_player_receiving_stats]
	SET player = te.player
		,season = te.season
		,play_count_route_sum = te.play_count_route_sum
		,play_count_pressed_sum = te.play_count_pressed_sum
		,target_sum = te.target_sum
		,catchable_target_sum = te.catchable_target_sum
		,drop_sum = te.drop_sum
		,reception_sum = te.reception_sum
		,receiving_yards_sum = te.receiving_yards_sum
		,receiving_yards_after_catch_sum = te.receiving_yards_after_catch_sum
		,receiving_yards_after_contact_sum = te.receiving_yards_after_contact_sum
		,receiving_fumble = te.receiving_fumble
		,receiving_touchdown_sum = te.receiving_touchdown_sum
		,receiving_tackle_avoided_sum = te.receiving_tackle_avoided_sum
		,receiving_interception_sum = te.receiving_interception_sum
		,receiving_yards_adjusted_sum = te.receiving_yards_adjusted_sum
		,receiving_yards_adjusted_with_int_sum = te.receiving_yards_adjusted_with_int_sum
		,penalty_yards_drawn_sum = te.penalty_yards_drawn_sum
		,catch_probability_target_sum = te.catch_probability_target_sum
		,catch_probability_sum = te.catch_probability_sum
		,receiving_epa_target_sum = te.receiving_epa_target_sum
		,receiving_epa_sum = te.receiving_epa_sum
		,receiving_air_yards_sum = te.receiving_air_yards_sum
		,catch_probability_derrick_target_sum = te.catch_probability_derrick_target_sum
		,catch_probability_derrick_sum = te.catch_probability_derrick_sum
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_receiving_stats te
	WHERE [bane_college_player_receiving_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_receiving_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_receiving_stats].play_count_route_sum <> te.play_count_route_sum
		 OR [bane_college_player_receiving_stats].play_count_pressed_sum <> te.play_count_pressed_sum
		 OR [bane_college_player_receiving_stats].target_sum <> te.target_sum
		 OR [bane_college_player_receiving_stats].catchable_target_sum <> te.catchable_target_sum
		 OR [bane_college_player_receiving_stats].drop_sum <> te.drop_sum
		 OR [bane_college_player_receiving_stats].reception_sum <> te.reception_sum
		 OR [bane_college_player_receiving_stats].receiving_yards_sum <> te.receiving_yards_sum
		 OR [bane_college_player_receiving_stats].receiving_yards_after_catch_sum <> te.receiving_yards_after_catch_sum
		 OR [bane_college_player_receiving_stats].receiving_yards_after_contact_sum <> te.receiving_yards_after_contact_sum
		 OR [bane_college_player_receiving_stats].receiving_fumble <> te.receiving_fumble
		 OR [bane_college_player_receiving_stats].receiving_touchdown_sum <> te.receiving_touchdown_sum
		 OR [bane_college_player_receiving_stats].receiving_tackle_avoided_sum <> te.receiving_tackle_avoided_sum
		 OR [bane_college_player_receiving_stats].receiving_interception_sum <> te.receiving_interception_sum
		 OR [bane_college_player_receiving_stats].receiving_yards_adjusted_sum <> te.receiving_yards_adjusted_sum
		 OR [bane_college_player_receiving_stats].receiving_yards_adjusted_with_int_sum <> te.receiving_yards_adjusted_with_int_sum
		 OR ISNULL([bane_college_player_receiving_stats].penalty_yards_drawn_sum,0) <> ISNULL(te.penalty_yards_drawn_sum,0)
		 OR [bane_college_player_receiving_stats].catch_probability_target_sum <> te.catch_probability_target_sum
		 OR ROUND([bane_college_player_receiving_stats].catch_probability_sum,1) <> ROUND(te.catch_probability_sum,1)
		 OR [bane_college_player_receiving_stats].receiving_epa_target_sum <> te.receiving_epa_target_sum
		 OR ABS(ISNULL([bane_college_player_receiving_stats].receiving_epa_sum,0) - ISNULL(te.receiving_epa_sum,0)) > 0.05
		 OR [bane_college_player_receiving_stats].receiving_air_yards_sum <> te.receiving_air_yards_sum
		 OR [bane_college_player_receiving_stats].catch_probability_derrick_target_sum <> te.catch_probability_derrick_target_sum
		 OR ROUND([bane_college_player_receiving_stats].catch_probability_derrick_sum,1) <> ROUND(te.catch_probability_derrick_sum,1)
		)


--Insert any new rows
	INSERT INTO [bane_college_player_receiving_stats]
	SELECT te.*
	FROM #temp_bane_college_player_receiving_stats te
	LEFT JOIN [bane_college_player_receiving_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_receiving_stats]
	FROM [bane_college_player_receiving_stats] ba
	LEFT JOIN #temp_bane_college_player_receiving_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_receiving_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(6)

	
	Running Stats (as of 10/2017)

    OUTPUT TABLES:            
		bane_college_player_running_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	-- Check if #temp_player_running_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_player_running_college') IS NOT NULL
		DROP TABLE #temp_player_running_college

	SELECT run.gsis_player_id
		,an.season
		,an.gsis_game_key
		,run.pff_play_id
		,run.pff_pp_id
		,is_no_play
		,is_two_point_conversion
		,is_scramble
		,yards_from_opponent_end_zone_start
		,distance
		,expected_points_change_play
		,running_yards
		,running_yards_after_contact
		,running_tackle_avoided
		,running_touchdown
		,running_fumble
		,rushing_yards_play
		,rushing_yards_play_expected
		,point_of_attack_change
		,run_point_of_attack_change_reason
		,success_defense_play
		,scrambling_yards
		,scrambling_tackle_avoided
		,scrambling_touchdown
		,scrambling_fumble
	INTO #temp_player_running_college
	FROM [college_player_play_running_facts] run
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON run.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_result_facts] res --The play results table
		ON run.pff_play_id = res.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON run.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON run.pff_play_id = ty.pff_play_id
	INNER JOIN [college_play_running_facts] ru --The play run table
		ON run.pff_play_id = ru.pff_play_id
	INNER JOIN [college_play_penalty_facts] pp --The play penalty table
		ON run.pff_play_id = pp.pff_play_id
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		AND (is_run = 1 OR is_scramble = 1)
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND run.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'


	-- Check if #temp_bane_college_player_running_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_running_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_running_stats

	SELECT run.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,SUM(CASE WHEN role_pff IN ('RUN','RUN BLOCK') AND is_scramble = 0 THEN 1 ELSE 0 END) AS play_count_run_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN 1 ELSE 0 END) AS run_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND is_two_point_conversion = 0 THEN 1 ELSE 0 END) AS run_no_2pt_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start >= 5 THEN 1 ELSE 0 END) AS run_no_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start <= 5 AND distance <= yards_from_opponent_end_zone_start THEN 1 ELSE 0 END) AS run_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND distance <= 3 THEN 1 ELSE 0 END) AS run_short_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND rushing_yards_play_expected IS NOT NULL THEN 1 ELSE 0 END) AS run_expected_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN running_yards ELSE 0 END) AS running_yards_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND is_two_point_conversion = 0 THEN running_yards ELSE 0 END) AS running_yards_no_2pt_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start >= 5 THEN running_yards ELSE 0 END) AS running_yards_no_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start <= 5 AND distance <= yards_from_opponent_end_zone_start THEN 1 ELSE 0 END) AS running_yards_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND distance <= 3 THEN running_yards ELSE 0 END) AS running_yards_short_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND rushing_yards_play_expected IS NOT NULL THEN running_yards ELSE 0 END) AS running_yards_expected_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND rushing_yards_play_expected IS NOT NULL THEN rushing_yards_play_expected ELSE 0 END) AS expected_running_yards_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN running_yards_after_contact ELSE 0 END) AS running_yards_after_contact_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND is_two_point_conversion = 0 THEN running_yards ELSE 0 END) AS running_yards_after_contact_no_2pt_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start >= 5 THEN running_yards ELSE 0 END) AS running_yards_after_contact_no_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN running_tackle_avoided ELSE 0 END) AS running_tackle_avoided_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND is_two_point_conversion = 0 THEN running_tackle_avoided ELSE 0 END) AS running_tackle_avoided_no_2pt_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start >= 5 THEN running_tackle_avoided ELSE 0 END) AS running_tackle_avoided_no_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND yards_from_opponent_end_zone_start <= 5 AND distance <= yards_from_opponent_end_zone_start AND success_defense_play = 0 THEN 1 ELSE 0 END) AS running_td_goal_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND distance <= 3 AND success_defense_play = 0 THEN 1 ELSE 0 END) AS running_success_short_sum
		,SUM(running_yards) + 20*SUM(running_touchdown) AS running_yards_adjusted_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN running_fumble ELSE 0 END) AS running_fumble_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN running_touchdown ELSE 0 END) AS running_touchdown_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 THEN point_of_attack_change ELSE 0 END) AS running_poa_change
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND run_point_of_attack_change_reason = 'VOLUNTARY' THEN 1 ELSE 0 END) AS running_poa_change_voluntary
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND run_point_of_attack_change_reason = 'VOLUNTARY' AND success_defense_play = 0 THEN 1 ELSE 0 END) AS running_poa_change_success
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND run_point_of_attack_change_reason = 'VOLUNTARY' AND rushing_yards_play > rushing_yards_play_expected THEN 1 ELSE 0 END) AS running_poa_change_above_expected
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play IS NOT NULL THEN 1 ELSE 0 END) AS running_epa_attempt_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) THEN expected_points_change_play ELSE 0 END) AS running_epa_sum
		,SUM(CASE WHEN role_pff IN ('RUN') AND is_scramble = 0 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play > 0 THEN 1 ELSE 0 END) AS running_success_sum
		,GETDATE() AS updated_at
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL THEN 1 ELSE 0 END) AS scrambles
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL THEN scrambling_yards ELSE 0 END) AS scrambling_yards
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL THEN scrambling_tackle_avoided ELSE 0 END) AS scrambling_tackles_avoided
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play IS NOT NULL THEN 1 ELSE 0 END) AS scrambling_epa_attempts
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) THEN expected_points_change_play ELSE 0 END) AS scrambling_epa
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play > 0 THEN 1 ELSE 0 END) AS scrambling_successes
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL THEN scrambling_touchdown ELSE 0 END) AS scrambling_touchdowns
		,SUM(CASE WHEN is_scramble = 1 AND scrambling_yards IS NOT NULL THEN scrambling_fumble ELSE 0 END) AS scrambling_fumbles
	INTO #temp_bane_college_player_running_stats
	FROM #temp_player_running_college run
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON run.pff_pp_id = pen.pff_pp_id
	INNER JOIN [college_player_play_offense_alignment_facts] oa --The player position table
		ON run.pff_pp_id = oa.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON run.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY run.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_player_running_college


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(6)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_player_play_running_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_running_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_running_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS run_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND is_two_point_conversion = 0 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS run_no_2pt_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND AbsoluteYardLine >= 5 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS run_no_goal_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND AbsoluteYardLine < 5 AND YardsToGo <= AbsoluteYardLine THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS run_goal_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND YardsToGo <= 3 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS run_short_sum
		,MAX(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') THEN Yards ELSE 0 END) AS running_yards_sum
		,MAX(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND is_two_point_conversion = 0 THEN Yards ELSE 0 END) AS running_yards_no_2pt_sum
		,MAX(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND AbsoluteYardLine >= 5 THEN Yards ELSE 0 END) AS running_yards_no_goal_sum
		,MAX(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND AbsoluteYardLine < 5 AND YardsToGo <= AbsoluteYardLine THEN Yards ELSE 0 END) AS running_yards_goal_sum
		,MAX(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') AND YardsToGo <= 3 THEN Yards ELSE 0 END) AS running_yards_short_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards, TD') AND AbsoluteYardLine < 5 AND YardsToGo <= AbsoluteYardLine THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS running_td_goal_sum
		--,NULL AS running_success_short_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus') AND fumble_play = 1 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS running_fumble_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Rushing Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS running_touchdown_sum
		--,NULL AS running_success_sum
	INTO #temp_non_pro_player_play_running_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('Rushing Yards','Rushing Yards - Minus','Rushing Yards, TD') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_running_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_run_sum
		,SUM(run_sum) AS run_sum
		,SUM(run_no_2pt_sum) AS run_no_2pt_sum
		,SUM(run_no_goal_sum) AS run_no_goal_sum
		,SUM(run_goal_sum) AS run_goal_sum
		,SUM(run_short_sum) AS run_short_sum
		,NULL AS run_expected_sum
		,SUM(running_yards_sum) AS running_yards_sum
		,SUM(running_yards_no_2pt_sum) AS running_yards_no_2pt_sum
		,SUM(running_yards_no_goal_sum) AS running_yards_no_goal_sum
		,SUM(running_yards_goal_sum) AS running_yards_goal_sum
		,SUM(running_yards_short_sum) AS running_yards_short_sum
		,NULL AS running_yards_expected_sum
		,NULL AS expected_running_yards_sum
		,NULL AS running_yards_after_contact_sum
		,NULL AS running_yards_after_contact_no_2pt_sum
		,NULL AS running_yards_after_contact_no_goal_sum
		,NULL AS running_tackle_avoided_sum
		,NULL AS running_tackle_avoided_no_2pt_sum
		,NULL AS running_tackle_avoided_no_goal_sum
		,SUM(running_td_goal_sum) AS running_td_goal_sum
		,NULL AS running_success_short_sum
		,NULL AS running_yards_adjusted_sum
		,SUM(running_fumble_sum) AS running_fumble_sum
		,SUM(running_touchdown_sum) AS running_touchdown_sum
		,NULL AS running_poa_change
		,NULL AS running_poa_change_voluntary
		,NULL AS running_poa_change_success
		,NULL AS running_poa_change_above_expected
		,NULL AS running_epa_attempt_sum
		,NULL AS running_epa_sum
		,NULL AS running_success_sum
		,GETDATE() AS updated_at
		,NULL AS scrambles
		,NULL AS scrambling_yards
		,NULL AS scrambling_tackles_avoided
		,NULL AS scrambling_epa_attempts
		,NULL AS scrambling_epa
		,NULL AS scrambling_successes
		,NULL AS scrambling_touchdowns
		,NULL AS scrambling_fumbles
	FROM #temp_non_pro_player_play_running_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(6)(b)

	
	Add in stats from NonProDB - game level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO #temp_bane_college_player_running_stats
	SELECT de.PlayerID AS gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_run_sum
		,(Attempts) AS run_sum
		,NULL AS run_no_2pt_sum
		,NULL AS run_no_goal_sum
		,NULL AS run_goal_sum
		,NULL AS run_short_sum
		,NULL AS run_expected_sum
		,(Yards) AS running_yards_sum
		,NULL AS running_yards_no_2pt_sum
		,NULL AS running_yards_no_goal_sum
		,NULL AS running_yards_goal_sum
		,NULL AS running_yards_short_sum
		,NULL AS running_yards_expected_sum
		,NULL AS expected_running_yards_sum
		,NULL AS running_yards_after_contact_sum
		,NULL AS running_yards_after_contact_no_2pt_sum
		,NULL AS running_yards_after_contact_no_goal_sum
		,NULL AS running_tackle_avoided_sum
		,NULL AS running_tackle_avoided_no_2pt_sum
		,NULL AS running_tackle_avoided_no_goal_sum
		,NULL AS running_td_goal_sum
		,NULL AS running_success_short_sum
		,NULL AS running_yards_adjusted_sum
		,NULL AS running_fumble_sum
		,(Touchdowns) AS running_touchdown_sum
		,NULL AS running_poa_change
		,NULL AS running_poa_change_voluntary
		,NULL AS running_poa_change_success
		,NULL AS running_poa_change_above_expected
		,NULL AS running_epa_attempt_sum
		,NULL AS running_epa_sum
		,NULL AS running_success_sum
		,GETDATE() AS updated_at
		,NULL AS scrambles
		,NULL AS scrambling_yards
		,NULL AS scrambling_tackles_avoided
		,NULL AS scrambling_epa_attempts
		,NULL AS scrambling_epa
		,NULL AS scrambling_successes
		,NULL AS scrambling_touchdowns
		,NULL AS scrambling_fumbles
	FROM NonProDB.dbo.Rushing de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_running_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND ac.ClubKey IS NULL


	DROP TABLE #temp_non_pro_player_play_running_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(6)(c)

	
	Update/add to/delete from the Bane running table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
--Update any rows that have changed
	UPDATE [bane_college_player_running_stats]
	SET player = te.player
		,season = te.season
		,play_count_run_sum = te.play_count_run_sum
		,run_sum = te.run_sum
		,run_no_2pt_sum = te.run_no_2pt_sum
		,run_no_goal_sum = te.run_no_goal_sum
		,run_goal_sum = te.run_goal_sum
		,run_short_sum = te.run_short_sum
		,run_expected_sum = te.run_expected_sum
		,running_yards_sum = te.running_yards_sum
		,running_yards_no_2pt_sum = te.running_yards_no_2pt_sum
		,running_yards_no_goal_sum = te.running_yards_no_goal_sum
		,running_yards_goal_sum = te.running_yards_goal_sum
		,running_yards_short_sum = te.running_yards_short_sum
		,running_yards_expected_sum = te.running_yards_expected_sum
		,expected_running_yards_sum = te.expected_running_yards_sum
		,running_yards_after_contact_sum = te.running_yards_after_contact_sum
		,running_yards_after_contact_no_2pt_sum = te.running_yards_after_contact_no_2pt_sum
		,running_yards_after_contact_no_goal_sum = te.running_yards_after_contact_no_goal_sum
		,running_tackle_avoided_sum = te.running_tackle_avoided_sum
		,running_tackle_avoided_no_2pt_sum = te.running_tackle_avoided_no_2pt_sum
		,running_tackle_avoided_no_goal_sum = te.running_tackle_avoided_no_goal_sum
		,running_td_goal_sum = te.running_td_goal_sum
		,running_success_short_sum = te.running_success_short_sum
		,running_yards_adjusted_sum = te.running_yards_adjusted_sum
		,running_fumble_sum = te.running_fumble_sum
		,running_touchdown_sum = te.running_touchdown_sum
		,running_poa_change = te.running_poa_change
		,running_poa_change_voluntary = te.running_poa_change_voluntary
		,running_poa_change_success = te.running_poa_change_success
		,running_poa_change_above_expected = te.running_poa_change_above_expected
		,running_epa_attempt_sum = te.running_epa_attempt_sum
		,running_epa_sum = te.running_epa_sum
		,running_success_sum = te.running_success_sum
		,updated_at = te.updated_at
		,scrambles = te.scrambles
		,scrambling_yards = te.scrambling_yards
		,scrambling_tackles_avoided = te.scrambling_tackles_avoided
		,scrambling_epa_attempts = te.scrambling_epa_attempts
		,scrambling_epa = te.scrambling_epa
		,scrambling_successes = te.scrambling_successes
		,scrambling_touchdowns = te.scrambling_touchdowns
		,scrambling_fumbles = te.scrambling_fumbles
	FROM #temp_bane_college_player_running_stats te
	WHERE [bane_college_player_running_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_running_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_running_stats].play_count_run_sum <> te.play_count_run_sum
		OR [bane_college_player_running_stats].run_sum <> te.run_sum
		OR [bane_college_player_running_stats].run_no_2pt_sum <> te.run_no_2pt_sum
		OR [bane_college_player_running_stats].run_no_goal_sum <> te.run_no_goal_sum
		OR [bane_college_player_running_stats].run_goal_sum <> te.run_goal_sum
		OR [bane_college_player_running_stats].run_short_sum <> te.run_short_sum
		OR [bane_college_player_running_stats].run_expected_sum <> te.run_expected_sum
		OR [bane_college_player_running_stats].running_yards_sum <> te.running_yards_sum
		OR [bane_college_player_running_stats].running_yards_no_2pt_sum <> te.running_yards_no_2pt_sum
		OR [bane_college_player_running_stats].running_yards_no_goal_sum <> te.running_yards_no_goal_sum
		OR [bane_college_player_running_stats].running_yards_goal_sum <> te.running_yards_goal_sum
		OR [bane_college_player_running_stats].running_yards_short_sum <> te.running_yards_short_sum
		OR [bane_college_player_running_stats].running_yards_expected_sum <> te.running_yards_expected_sum
		OR ROUND([bane_college_player_running_stats].expected_running_yards_sum,1) <> ROUND(te.expected_running_yards_sum,1)
		OR [bane_college_player_running_stats].running_yards_after_contact_sum <> te.running_yards_after_contact_sum
		OR [bane_college_player_running_stats].running_yards_after_contact_no_2pt_sum <> te.running_yards_after_contact_no_2pt_sum
		OR [bane_college_player_running_stats].running_yards_after_contact_no_goal_sum <> te.running_yards_after_contact_no_goal_sum
		OR [bane_college_player_running_stats].running_tackle_avoided_sum <> te.running_tackle_avoided_sum
		OR [bane_college_player_running_stats].running_tackle_avoided_no_2pt_sum <> te.running_tackle_avoided_no_2pt_sum
		OR [bane_college_player_running_stats].running_tackle_avoided_no_goal_sum <> te.running_tackle_avoided_no_goal_sum
		OR [bane_college_player_running_stats].running_td_goal_sum <> te.running_td_goal_sum
		OR [bane_college_player_running_stats].running_success_short_sum <> te.running_success_short_sum
		OR ISNULL([bane_college_player_running_stats].running_yards_adjusted_sum,0) <> ISNULL(te.running_yards_adjusted_sum,0)
		OR [bane_college_player_running_stats].running_fumble_sum <> te.running_fumble_sum
		OR [bane_college_player_running_stats].running_touchdown_sum <> te.running_touchdown_sum
		OR [bane_college_player_running_stats].running_poa_change <> te.running_poa_change
		OR [bane_college_player_running_stats].running_poa_change_voluntary <> te.running_poa_change_voluntary
		OR [bane_college_player_running_stats].running_poa_change_success <> te.running_poa_change_success
		OR [bane_college_player_running_stats].running_poa_change_above_expected <> te.running_poa_change_above_expected
		OR [bane_college_player_running_stats].running_epa_attempt_sum <> te.running_epa_attempt_sum
		OR ABS(ISNULL([bane_college_player_running_stats].running_epa_sum,0) - ISNULL(te.running_epa_sum,0)) > 0.05
		OR [bane_college_player_running_stats].running_success_sum <> te.running_success_sum
		OR ISNULL([bane_college_player_running_stats].scrambles,0) <> ISNULL(te.scrambles,0)
		OR ISNULL([bane_college_player_running_stats].scrambling_yards,0) <> ISNULL(te.scrambling_yards,0)
		OR ISNULL([bane_college_player_running_stats].scrambling_tackles_avoided,0) <> ISNULL(te.scrambling_tackles_avoided,0)
		OR ISNULL([bane_college_player_running_stats].scrambling_epa_attempts,0) <> ISNULL(te.scrambling_epa_attempts,0)
		OR ABS(ISNULL([bane_college_player_running_stats].scrambling_epa,0) - ISNULL(te.scrambling_epa,0)) > 0.05
		OR ISNULL([bane_college_player_running_stats].scrambling_successes,0) <> ISNULL(te.scrambling_successes,0)
		OR ISNULL([bane_college_player_running_stats].scrambling_touchdowns,0) <> ISNULL(te.scrambling_touchdowns,0)
		OR ISNULL([bane_college_player_running_stats].scrambling_fumbles,0) <> ISNULL(te.scrambling_fumbles,0)
		)


--Insert any new rows
	INSERT INTO [bane_college_player_running_stats]
	SELECT te.*
	FROM #temp_bane_college_player_running_stats te
	LEFT JOIN [bane_college_player_running_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_running_stats]
	FROM [bane_college_player_running_stats] ba
	LEFT JOIN #temp_bane_college_player_running_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_running_stats
	

	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(7)

	
	Tackling Stats (as of 08/2016)

    OUTPUT TABLES:            
		bane_college_player_tackling_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_bane_college_player_tackling_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_tackling_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_tackling_stats

	SELECT pt.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,an.season
		,an.gsis_game_key
		,COUNT(pt.pff_pp_id) AS play_count_sum
		,SUM(tackle) AS tackle_sum
		,SUM(assist) AS assist_sum
		,SUM(tackle_or_assist) AS tackle_assist_sum
		,SUM(CASE WHEN is_run = 1 THEN tackle_or_assist ELSE 0 END) AS run_tackle_sum
		,SUM(tackle_4_way_code) AS tackle_4_way_sum
		,SUM(tackle_probability) AS tackle_probability_sum
		,SUM(tackle_probability_derrick) AS tackle_probability_derrick_sum
		,SUM(stop_pff) AS stop_pff_sum
		,SUM(stop_brv) AS stop_brv_sum
		,SUM(CASE WHEN is_run = 1 THEN stop_pff ELSE 0 END) AS run_stop_pff_sum
		,SUM(CASE WHEN is_run = 1 THEN stop_brv ELSE 0 END) AS run_stop_brv_sum
		,SUM(fumble_forced) AS fumble_forced_sum
		,SUM(tackle_for_loss) AS tackle_for_loss_sum
		,GETDATE() AS updated_at
		,SUM(touchdown) AS defensive_touchdowns
		,SUM(missed_tackle) AS missed_tackles
	INTO #temp_bane_college_player_tackling_stats
	FROM [college_player_play_tackling_facts] pt
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON pt.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON pt.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON pt.pff_play_id = ty.pff_play_id
	LEFT JOIN [college_player_play_penalty_facts] pen --The player penalty table
		ON pt.pff_pp_id = pen.pff_pp_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON pt.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND penalty_defensive_pass_interference = 1 OR penalty_defensive_holding = 1 OR penalty_facemask = 1 OR penalty_horse_collar = 1))
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND pt.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'
	GROUP BY pt.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,an.season
		,an.gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(7)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_non_pro_player_play_tackling_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_tackling_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_tackling_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN SpecialTeamsPlay = 0 AND STPlayType = 0 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS tackle_sum
		,CASE WHEN SUM(CASE WHEN SpecialTeamsPlay = 0 AND STPlayType = 0 AND stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS assist_sum
		,CASE WHEN SUM(CASE WHEN SpecialTeamsPlay = 0 AND STPlayType = 0 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss','Tackle Assist') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS tackle_assist_sum
		,CASE WHEN SUM(CASE WHEN SpecialTeamsPlay = 0 AND STPlayType = 0 AND stat_name IN ('Fumble - Forced') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS fumble_forced_sum
		,CASE WHEN SUM(CASE WHEN SpecialTeamsPlay = 0 AND STPlayType = 0 AND stat_name IN ('1/2 Tackle for a Loss','Tackle for a Loss') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS tackle_for_loss_sum
	INTO #temp_non_pro_player_play_tackling_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Fumble - Forced') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_tackling_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_sum
		,SUM(tackle_sum)AS tackle_sum
		,SUM(assist_sum) AS assist_sum
		,SUM(tackle_assist_sum) AS tackle_assist_sum
		,NULL AS run_tackle_sum
		,NULL AS tackle_4_way_sum
		,NULL AS tackle_probability_sum
		,NULL AS tackle_probability_derrick_sum
		,NULL AS stop_pff_sum
		,NULL AS stop_brv_sum
		,NULL AS run_stop_pff_sum
		,NULL AS run_stop_brv_sum
		,SUM(fumble_forced_sum) AS fumble_forced_sum
		,SUM(tackle_for_loss_sum) AS tackle_for_loss_sum
		,GETDATE() AS updated_at
		,NULL AS defensive_touchdowns
		,NULL AS missed_tackles
	FROM #temp_non_pro_player_play_tackling_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(7)(b)

	
	Add in stats from NonProDB - game level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO #temp_bane_college_player_tackling_stats
	SELECT de.PlayerID AS gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_sum
		,(Tackles) AS tackle_sum
		,(Assists) AS assist_sum
		,(Tackles + Assists) AS tackle_assist_sum
		,NULL AS run_tackle_sum
		,NULL AS tackle_4_way_sum
		,NULL AS tackle_probability_sum
		,NULL AS tackle_probability_derrick_sum
		,NULL AS stop_pff_sum
		,NULL AS stop_brv_sum
		,NULL AS run_stop_pff_sum
		,NULL AS run_stop_brv_sum
		,(ForcedFumbles) AS fumble_forced_sum
		,(TacklesForALoss) AS tackle_for_loss_sum
		,GETDATE() AS updated_at
		,NULL AS defensive_touchdowns
		,NULL AS missed_tackles
	FROM NonProDB.dbo.Defensive de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_tackling_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND ac.ClubKey IS NULL


-- Check if #temp_non_pro_player_defensive_tds_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_defensive_tds_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_defensive_tds_stats

	SELECT de.PlayerID AS gsis_player_id
		,de.GameKey AS gsis_game_key
		,SUM(CASE WHEN ReturnType IN (1,4) THEN Touchdowns ELSE 0 END) AS defensive_touchdowns
	INTO #temp_non_pro_player_defensive_tds_stats
	FROM NonProDB.dbo.[Returns] de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND ac.ClubKey IS NULL
	GROUP BY de.PlayerID
		,de.GameKey
	HAVING SUM(CASE WHEN ReturnType IN (1,4) THEN Touchdowns ELSE 0 END) > 0


	-- Update the college_play_passing_facts table with catch probability
	UPDATE #temp_bane_college_player_tackling_stats
		SET defensive_touchdowns  = dt.defensive_touchdowns
	FROM #temp_non_pro_player_defensive_tds_stats dt
	WHERE #temp_bane_college_player_tackling_stats.gsis_game_key = dt.gsis_game_key
		AND #temp_bane_college_player_tackling_stats.gsis_player_id = dt.gsis_player_id

	
	DROP TABLE #temp_non_pro_player_play_tackling_stats
	DROP TABLE #temp_non_pro_player_defensive_tds_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(7)(c)

	
	Update/add to/delete from the Bane tackling table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--Update any rows that have changed
	UPDATE [bane_college_player_tackling_stats]
	SET player = te.player
		,season = te.season
		,play_count_sum = te.play_count_sum
		,tackle_sum = te.tackle_sum
		,assist_sum = te.assist_sum
		,tackle_assist_sum = te.tackle_assist_sum
		,run_tackle_sum = te.run_tackle_sum
		,tackle_4_way_sum = te.tackle_4_way_sum
		,tackle_probability_sum = te.tackle_probability_sum
		,tackle_probability_derrick_sum = te.tackle_probability_derrick_sum
		,stop_pff_sum = te.stop_pff_sum
		,stop_brv_sum = te.stop_brv_sum
		,run_stop_pff_sum = te.run_stop_pff_sum
		,run_stop_brv_sum = te.run_stop_brv_sum
		,fumble_forced_sum = te.fumble_forced_sum
		,tackle_for_loss_sum = te.tackle_for_loss_sum
		,updated_at = te.updated_at
		,defensive_touchdowns = te.defensive_touchdowns
		,missed_tackles = te.missed_tackles
	FROM #temp_bane_college_player_tackling_stats te
	WHERE [bane_college_player_tackling_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_tackling_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_tackling_stats].play_count_sum <> te.play_count_sum
		OR [bane_college_player_tackling_stats].tackle_sum <> te.tackle_sum
		OR [bane_college_player_tackling_stats].assist_sum <> te.assist_sum
		OR [bane_college_player_tackling_stats].tackle_assist_sum <> te.tackle_assist_sum
		OR [bane_college_player_tackling_stats].run_tackle_sum <> te.run_tackle_sum
		OR [bane_college_player_tackling_stats].tackle_4_way_sum <> te.tackle_4_way_sum
		OR ROUND([bane_college_player_tackling_stats].tackle_probability_sum,1) <> ROUND(te.tackle_probability_sum,1)
		OR ROUND([bane_college_player_tackling_stats].tackle_probability_derrick_sum,1) <> ROUND(te.tackle_probability_derrick_sum,1)
		OR [bane_college_player_tackling_stats].stop_pff_sum <> te.stop_pff_sum
		OR [bane_college_player_tackling_stats].stop_brv_sum <> te.stop_brv_sum
		OR [bane_college_player_tackling_stats].run_stop_pff_sum <> te.run_stop_pff_sum
		OR [bane_college_player_tackling_stats].run_stop_brv_sum <> te.run_stop_brv_sum
		OR [bane_college_player_tackling_stats].fumble_forced_sum <> te.fumble_forced_sum
		OR [bane_college_player_tackling_stats].tackle_for_loss_sum <> te.tackle_for_loss_sum
		OR ISNULL([bane_college_player_tackling_stats].defensive_touchdowns,0) <> ISNULL(te.defensive_touchdowns,0)
		OR ISNULL([bane_college_player_tackling_stats].missed_tackles,0) <> ISNULL(te.missed_tackles,0)
		)


--Insert any new rows
	INSERT INTO [bane_college_player_tackling_stats]
	SELECT te.*
	FROM #temp_bane_college_player_tackling_stats te
	LEFT JOIN [bane_college_player_tackling_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_tackling_stats]
	FROM [bane_college_player_tackling_stats] ba
	LEFT JOIN #temp_bane_college_player_tackling_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_tackling_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(8)

	
	Passing Stats (as of 11/2017)

    OUTPUT TABLES:            
		bane_college_player_passing_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_player_passing_college exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_player_passing_college') IS NOT NULL
		DROP TABLE #temp_player_passing_college

	SELECT ps.gsis_player_id
		,an.season
		,an.gsis_game_key
		,ps.pff_play_id
		,ps.pff_pp_id
		,is_no_play
		,is_pass
		,quarterback
		,passer
		,pumpfake
		,passing_attempt
		,passing_attempt_no_throw_aways
		,passing_attempt_throw
		,passing_completion
		,passing_yards
		,passing_penalty_yards_drawn
		,passing_drop
		,passing_drop_yards
		,passing_air_yards
		,passing_touchdown
		,passing_dropped_touchdown
		,passing_interception
		,passing_dropped_interception
		,passing_sack
		,passing_sack_yards
		,passing_fumble
		,passing_batted_pass
	INTO #temp_player_passing_college
	FROM [college_player_play_passing_facts] ps
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON ps.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON ps.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON ps.pff_play_id = ty.pff_play_id
	LEFT JOIN [college_play_penalty_facts] pen --The play penalty table
		ON ps.pff_play_id = pen.pff_play_id
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		--AND (is_no_play = 0 OR (is_no_play = 1 AND penalty_defensive_pass_interference_play = 1 OR penalty_defensive_holding_play = 1 OR penalty_illegal_contact_play = 1))
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND ps.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'


	-- Check if #temp_bane_college_player_passing_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_passing_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_passing_stats

	SELECT ps.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,COUNT(ps.pff_pp_id) AS play_count_sum
		,SUM(CASE WHEN is_pass = 1 THEN 1 ELSE 0 END) AS pass_play_sum
		,SUM(quarterback) AS quarterback_sum
		,SUM(passer) AS passer_sum
		,SUM(pumpfake) AS pumpfake_sum
		,SUM(passing_attempt) AS passing_attempt_sum
		,SUM(passing_attempt_no_throw_aways) AS passing_attempt_no_throw_aways_sum
		,SUM(passing_attempt_throw) AS passing_attempt_throw_sum
		,SUM(passing_completion) AS passing_completion_sum
		,SUM(passing_yards) AS passing_yards_sum
		,SUM(passing_penalty_yards_drawn) AS passing_penalty_yards_drawn_sum
		,SUM(passing_drop) AS passing_drop_sum
		,SUM(passing_drop_yards) AS passing_drop_yards_sum
		,SUM(CASE WHEN passing_completion = 1 THEN passing_air_yards ELSE 0 END) AS passing_air_yards_sum
		,SUM(passing_touchdown) AS passing_touchdown_sum
		,SUM(passing_dropped_touchdown) AS passing_dropped_touchdown_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_interception ELSE 0 END) AS passing_interception_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_dropped_interception ELSE 0 END) AS passing_dropped_interception_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_sack ELSE 0 END) AS passing_sack_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_sack_yards ELSE 0 END) AS passing_sack_yards_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_fumble ELSE 0 END) AS passing_fumble_sum
		,SUM(CASE WHEN is_no_play = 0 THEN passing_batted_pass ELSE 0 END) AS passing_batted_pass_sum
		,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 AND catch_probability IS NOT NULL THEN 1 ELSE 0 END) AS passing_catch_probability_attempt_sum
		,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 THEN catch_probability ELSE 0 END) AS passing_catch_probability_sum
		,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 AND catch_probability IS NOT NULL THEN passing_completion ELSE 0 END) AS passing_catch_probability_completion_sum
		,SUM(CASE WHEN passer = 1 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) AND expected_points_change_play IS NOT NULL THEN 1 ELSE 0 END) AS passing_epa_attempt_sum
		,SUM(CASE WHEN passer = 1 AND (is_no_play = 0 OR (is_no_play = 1 AND expected_points_change_play > 0)) THEN expected_points_change_play ELSE 0 END) AS passing_epa_sum
		,NULL AS passing_catch_probability_derrick_attempt_sum
		,NULL AS passing_catch_probability_derrick_sum
		,NULL AS passing_catch_probability_derrick_completion_sum
		--,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 AND catch_probability_derrick IS NOT NULL THEN 1 ELSE 0 END) AS passing_catch_probability_derrick_attempt_sum
		--,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 THEN catch_probability_derrick ELSE 0 END) AS passing_catch_probability_derrick_sum
		--,SUM(CASE WHEN passing_attempt = 1 AND is_no_play = 0 AND catch_probability_derrick IS NOT NULL THEN passing_completion ELSE 0 END) AS passing_catch_probability_derrick_completion_sum
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_passing_stats
	FROM #temp_player_passing_college ps
	INNER JOIN [college_play_result_facts] re --The play results table
		ON ps.pff_play_id = re.pff_play_id
	INNER JOIN [college_play_passing_facts] pp --The play pass table
		ON ps.pff_play_id = pp.pff_play_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY ps.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_player_passing_college


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(8)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_player_play_passing_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_passing_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_passing_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Pass Incomplete','Interception (by Passer)','Passing Yards','Passing Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS passing_attempt_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Passing Yards','Passing Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS passing_completion_sum
		,MAX(CASE WHEN stat_name IN ('Passing Yards','Passing Yards, TD') THEN Yards ELSE 0 END) AS passing_yards_sum
		--,MAX(CASE WHEN stat_name IN ('Pass Incomplete','Interception (by Passer)','Passing Yards','Passing Yards, TD') THEN air_yards ELSE NULL END) AS passing_air_yards_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Passing Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS passing_touchdown_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Interception (by Passer)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS passing_interception_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Sack Yards (Offense)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS passing_sack_sum
		,MIN(CASE WHEN stat_name IN ('Sack Yards (Offense)') THEN Yards * (CASE WHEN Yards > 0 THEN -1 ELSE 1 END) ELSE 0 END) AS passing_sack_yards_sum
	INTO #temp_non_pro_player_play_passing_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('Pass Incomplete','Interception (by Passer)','Passing Yards','Passing Yards, TD') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Sack Yards (Offense)') THEN 1 ELSE 0 END) > 0)


	INSERT #temp_bane_college_player_passing_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_sum
		,NULL AS pass_play_sum
		,NULL AS quarterback_sum
		,NULL AS passer_sum
		,NULL AS pumpfake_sum
		,SUM(passing_attempt_sum) AS passing_attempt_sum
		,NULL AS passing_attempt_no_throw_aways_sum
		,NULL AS passing_attempt_throw_sum
		,SUM(passing_completion_sum) AS passing_completion_sum
		,SUM(passing_yards_sum) AS passing_yards_sum
		,NULL AS passing_penalty_yards_drawn_sum
		,NULL AS passing_drop_sum
		,NULL AS passing_drop_yards_sum
		,NULL AS passing_air_yards_sum
		,SUM(passing_touchdown_sum) AS passing_touchdown_sum
		,NULL AS passing_dropped_touchdown_sum
		,SUM(passing_interception_sum) AS passing_interception_sum
		,NULL AS passing_dropped_interception_sum
		,SUM(passing_sack_sum) AS passing_sack_sum
		,SUM(passing_sack_yards_sum) AS passing_sack_yards_sum
		,NULL AS passing_fumble_sum
		,NULL AS passing_batted_pass_sum
		,NULL AS passing_catch_probability_attempt_sum
		,NULL AS passing_catch_probability_sum
		,NULL AS passing_catch_probability_completion_sum
		,NULL AS passing_epa_attempt_sum
		,NULL AS passing_epa_sum
		,NULL AS passing_catch_probability_derrick_attempt_sum
		,NULL AS passing_catch_probability_derrick_sum
		,NULL AS passing_catch_probability_derrick_completion_sum
		,GETDATE() AS updated_at
	FROM #temp_non_pro_player_play_passing_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(8)(b)

	
	Add in stats from NonProDB - game level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT #temp_bane_college_player_passing_stats
	SELECT de.PlayerID AS gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS play_count_sum
		,NULL AS pass_play_sum
		,NULL AS quarterback_sum
		,NULL AS passer_sum
		,NULL AS pumpfake_sum
		,(Attempts) AS passing_attempt_sum
		,NULL AS passing_attempt_no_throw_aways_sum
		,NULL AS passing_attempt_throw_sum
		,(Completions) AS passing_completion_sum
		,(Yards) AS passing_yards_sum
		,NULL AS passing_penalty_yards_drawn_sum
		,NULL AS passing_drop_sum
		,NULL AS passing_drop_yards_sum
		,NULL AS passing_air_yards_sum
		,(Touchdowns) AS passing_touchdown_sum
		,NULL AS passing_dropped_touchdown_sum
		,(Interceptions) AS passing_interception_sum
		,NULL AS passing_dropped_interception_sum
		,(Sacks) AS passing_sack_sum
		,(SackYardage) AS passing_sack_yards_sum
		,NULL AS passing_fumble_sum
		,NULL AS passing_batted_pass_sum
		,NULL AS passing_catch_probability_attempt_sum
		,NULL AS passing_catch_probability_sum
		,NULL AS passing_catch_probability_completion_sum
		,NULL AS passing_epa_attempt_sum
		,NULL AS passing_epa_sum
		,NULL AS passing_catch_probability_derrick_attempt_sum
		,NULL AS passing_catch_probability_derrick_sum
		,NULL AS passing_catch_probability_derrick_completion_sum
		,GETDATE() AS updated_at
	FROM NonProDB.dbo.Passing de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_passing_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND ac.ClubKey IS NULL


	DROP TABLE #temp_non_pro_player_play_passing_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(8)(c)

	
	Update/add to/delete from the Bane passing table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--Update any rows that have changed
	UPDATE [bane_college_player_passing_stats]
	SET player = te.player
		,season = te.season
		,play_count_sum = te.play_count_sum
		,pass_play_sum = te.pass_play_sum
		,quarterback_sum = te.quarterback_sum
		,passer_sum = te.passer_sum
		,pumpfake_sum = te.pumpfake_sum
		,passing_attempt_sum = te.passing_attempt_sum
		,passing_attempt_no_throw_aways_sum = te.passing_attempt_no_throw_aways_sum
		,passing_attempt_throw_sum = te.passing_attempt_throw_sum
		,passing_completion_sum = te.passing_completion_sum
		,passing_yards_sum = te.passing_yards_sum
		,passing_penalty_yards_drawn_sum = te.passing_penalty_yards_drawn_sum
		,passing_drop_sum = te.passing_drop_sum
		,passing_drop_yards_sum = te.passing_drop_yards_sum
		,passing_air_yards_sum = te.passing_air_yards_sum
		,passing_touchdown_sum = te.passing_touchdown_sum
		,passing_dropped_touchdown_sum = te.passing_dropped_touchdown_sum
		,passing_interception_sum = te.passing_interception_sum
		,passing_dropped_interception_sum = te.passing_dropped_interception_sum
		,passing_sack_sum = te.passing_sack_sum
		,passing_sack_yards_sum = te.passing_sack_yards_sum
		,passing_fumble_sum = te.passing_fumble_sum
		,passing_batted_pass_sum = te.passing_batted_pass_sum
		,passing_catch_probability_attempt_sum = te.passing_catch_probability_attempt_sum
		,passing_catch_probability_sum = te.passing_catch_probability_sum
		,passing_catch_probability_completion_sum = te.passing_catch_probability_completion_sum
		,passing_epa_attempt_sum = te.passing_epa_attempt_sum
		,passing_epa_sum = te.passing_epa_sum
		,passing_catch_probability_derrick_attempt_sum = te.passing_catch_probability_derrick_attempt_sum
		,passing_catch_probability_derrick_sum = te.passing_catch_probability_derrick_sum
		,passing_catch_probability_derrick_completion_sum = te.passing_catch_probability_derrick_completion_sum
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_passing_stats te
	WHERE [bane_college_player_passing_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_passing_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_passing_stats].play_count_sum <> te.play_count_sum
		OR [bane_college_player_passing_stats].pass_play_sum <> te.pass_play_sum
		OR [bane_college_player_passing_stats].quarterback_sum <> te.quarterback_sum
		OR [bane_college_player_passing_stats].passer_sum <> te.passer_sum
		OR [bane_college_player_passing_stats].pumpfake_sum <> te.pumpfake_sum
		OR [bane_college_player_passing_stats].passing_attempt_sum <> te.passing_attempt_sum
		OR [bane_college_player_passing_stats].passing_attempt_no_throw_aways_sum <> te.passing_attempt_no_throw_aways_sum
		OR [bane_college_player_passing_stats].passing_attempt_throw_sum <> te.passing_attempt_throw_sum
		OR [bane_college_player_passing_stats].passing_completion_sum <> te.passing_completion_sum
		OR [bane_college_player_passing_stats].passing_yards_sum <> te.passing_yards_sum
		OR [bane_college_player_passing_stats].passing_penalty_yards_drawn_sum <> te.passing_penalty_yards_drawn_sum
		OR [bane_college_player_passing_stats].passing_drop_sum <> te.passing_drop_sum
		OR [bane_college_player_passing_stats].passing_drop_yards_sum <> te.passing_drop_yards_sum
		OR [bane_college_player_passing_stats].passing_air_yards_sum <> te.passing_air_yards_sum
		OR [bane_college_player_passing_stats].passing_touchdown_sum <> te.passing_touchdown_sum
		OR [bane_college_player_passing_stats].passing_dropped_touchdown_sum <> te.passing_dropped_touchdown_sum
		OR [bane_college_player_passing_stats].passing_interception_sum <> te.passing_interception_sum
		OR [bane_college_player_passing_stats].passing_dropped_interception_sum <> te.passing_dropped_interception_sum
		OR [bane_college_player_passing_stats].passing_sack_sum <> te.passing_sack_sum
		OR [bane_college_player_passing_stats].passing_sack_yards_sum <> te.passing_sack_yards_sum
		OR [bane_college_player_passing_stats].passing_fumble_sum <> te.passing_fumble_sum
		OR [bane_college_player_passing_stats].passing_batted_pass_sum <> te.passing_batted_pass_sum
		OR [bane_college_player_passing_stats].passing_catch_probability_attempt_sum <> te.passing_catch_probability_attempt_sum
		OR ROUND([bane_college_player_passing_stats].passing_catch_probability_sum,1) <> ROUND(te.passing_catch_probability_sum,1)
		OR [bane_college_player_passing_stats].passing_catch_probability_completion_sum <> te.passing_catch_probability_completion_sum
		OR [bane_college_player_passing_stats].passing_epa_attempt_sum <> te.passing_epa_attempt_sum
		OR ABS(ISNULL([bane_college_player_passing_stats].passing_epa_sum,0) - ISNULL(te.passing_epa_sum,0)) > 0.05
		OR [bane_college_player_passing_stats].passing_catch_probability_derrick_attempt_sum <> te.passing_catch_probability_derrick_attempt_sum
		OR ROUND([bane_college_player_passing_stats].passing_catch_probability_derrick_sum,1) <> ROUND(te.passing_catch_probability_derrick_sum,1)
		OR [bane_college_player_passing_stats].passing_catch_probability_derrick_completion_sum <> te.passing_catch_probability_derrick_completion_sum
		)


--Insert any new rows
	INSERT INTO [bane_college_player_passing_stats]
	SELECT te.*
	FROM #temp_bane_college_player_passing_stats te
	LEFT JOIN [bane_college_player_passing_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_passing_stats]
	FROM [bane_college_player_passing_stats] ba
	LEFT JOIN #temp_bane_college_player_passing_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_passing_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(9)

	
	Special Teams Stats (as of 09/2021)

    OUTPUT TABLES:            
		bane_college_player_special_teams_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_bane_college_player_special_teams_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_special_teams_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_special_teams_stats

	SELECT st.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,an.season
		,an.gsis_game_key
		,COUNT(st.pff_pp_id) AS play_count_sum
		,SUM(kick_attempt) AS kick_attempts
		,SUM(kick_made) AS kick_makes
		,SUM(kick_blocked) AS kick_blocks
		,SUM(field_goal_attempt) AS field_goal_attempts
		,SUM(field_goal_made) AS field_goal_makes
		,SUM(field_goal_blocked) AS field_goal_blocks
		,SUM(extra_point_attempt) AS extra_point_attempts
		,SUM(extra_point_made) AS extra_point_makes
		,SUM(extra_point_blocked) AS extra_point_blocks
		,SUM(CASE WHEN kick_yards >= 10 AND kick_yards <= 19 THEN kick_attempt ELSE 0 END) AS attempts_0_19
		,SUM(CASE WHEN kick_yards >= 20 AND kick_yards <= 29 THEN kick_attempt ELSE 0 END) AS attempts_20_29
		,SUM(CASE WHEN kick_yards >= 30 AND kick_yards <= 39 THEN kick_attempt ELSE 0 END) AS attempts_30_39
		,SUM(CASE WHEN kick_yards >= 40 AND kick_yards <= 49 THEN kick_attempt ELSE 0 END) AS attempts_40_49
		,SUM(CASE WHEN kick_yards >= 50 AND kick_yards <= 59 THEN kick_attempt ELSE 0 END) AS attempts_50_59
		,SUM(CASE WHEN kick_yards >= 60 THEN kick_attempt ELSE 0 END) AS attempts_60_plus
		,SUM(CASE WHEN kick_yards >= 10 AND kick_yards <= 19 THEN kick_made ELSE 0 END) AS makes_0_19
		,SUM(CASE WHEN kick_yards >= 20 AND kick_yards <= 29 THEN kick_made ELSE 0 END) AS makes_20_29
		,SUM(CASE WHEN kick_yards >= 30 AND kick_yards <= 39 THEN kick_made ELSE 0 END) AS makes_30_39
		,SUM(CASE WHEN kick_yards >= 40 AND kick_yards <= 49 THEN kick_made ELSE 0 END) AS makes_40_49
		,SUM(CASE WHEN kick_yards >= 50 AND kick_yards <= 59 THEN kick_made ELSE 0 END) AS makes_50_59
		,SUM(CASE WHEN kick_yards >= 60 THEN kick_made ELSE 0 END) AS makes_60_plus
		,SUM(punt_attempt) AS punt_attempts
		,SUM(punt_gross_yards) AS punt_gross_yards_sum
		,SUM(punt_net_yards) AS punt_net_yards_sum
		,SUM(punt_inside_20) AS punts_inside_20
		,SUM(punt_inside_10) AS punts_inside_10
		,SUM(punt_touchback) AS punt_touchbacks
		,SUM(punt_fair_catch) AS punt_fair_catches
		,SUM(punt_return_attempt) AS punt_return_attempt
		,SUM(punt_return_yards) AS punt_return_yards_sum
		,SUM(punt_return_fair_catch) AS punt_return_fair_catches
		,SUM(punt_return_touchdown) AS punt_return_touchdowns
		,SUM(kickoff_attempt) AS kickoff_attempts
		,SUM(kickoff_returned) AS kickoffs_returned
		,SUM(kickoff_touchback) AS kickoff_touchbacks
		,SUM(kickoff_return_yards_allowed) AS kickoff_return_yards_allowed_sum
		,SUM(kickoff_return_attempt) AS kickoff_return_attempts
		,SUM(kickoff_return_yards) AS kickoff_return_yards_sum
		,SUM(kickoff_return_touchdown) AS kickoff_return_touchdowns
		,SUM(kickoff_tackle) AS kickoff_tackles
		,SUM(kickoff_assist) AS kickoff_assists
		,SUM(kickoff_missed_tackle) AS kickoff_missed_tackles
		,SUM(punt_tackle) AS punt_tackles
		,SUM(punt_assist) AS punt_assists
		,SUM(punt_missed_tackle) AS punt_missed_tackles
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_special_teams_stats
	FROM [college_player_play_special_teams_facts] st
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON st.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON st.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON st.pff_play_id = ty.pff_play_id
	LEFT JOIN [college_play_penalty_facts] pen --The play penalty table
		ON st.pff_play_id = pen.pff_play_id
	INNER JOIN [college_play_result_facts] re --The play results table
		ON st.pff_play_id = re.pff_play_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON st.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE 1 = 1
		AND season >= @iSeason
		AND is_no_play = 0
		AND is_two_point_conversion = 0
		AND gsis_game_key IS NOT NULL
		AND st.gsis_player_id <> 0
		AND season_type <> 'AS'
	GROUP BY st.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,an.season
		,an.gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(9)(a)

	
	Add in stats from NonProDB - play level.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_non_pro_player_play_special_teams_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_non_pro_player_play_special_teams_stats') IS NOT NULL
		DROP TABLE #temp_non_pro_player_play_special_teams_stats

	SELECT ps.PlayerID AS gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,ps.GameKey AS gsis_game_key
		,ps.PlayID AS gsis_play_id
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)','Extra Point - Blocked','Extra Point - Failed','Extra Point - Good') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kick_attempts
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Extra Point - Good') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kick_makes
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Blocked (Offense)','Extra Point - Blocked') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kick_blocks
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS field_goal_attempts
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS field_goal_makes
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Blocked (Offense)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS field_goal_blocks
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Extra Point - Blocked','Extra Point - Failed','Extra Point - Good') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS extra_point_attempts
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Extra Point - Good') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS extra_point_makes
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Extra Point - Blocked') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS extra_point_blocks
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 10 AND Yards <= 19 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_0_19
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 20 AND Yards <= 29 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_20_29
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 30 AND Yards <= 39 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_30_39
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 40 AND Yards <= 49 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_40_49
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 50 AND Yards <= 59 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_50_59
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)') AND Yards >= 60 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS attempts_60_plus
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 10 AND Yards <= 19 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_0_19
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 20 AND Yards <= 29 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_20_29
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 30 AND Yards <= 39 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_30_39
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 40 AND Yards <= 49 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_40_49
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 50 AND Yards <= 59 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_50_59
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Field Goal Yards') AND Yards >= 60 THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS makes_60_plus
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punting Yards','Punt Blocked (Offense)') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_attempts
		,MAX(CASE WHEN stat_name IN ('Punting Yards') THEN Yards ELSE 0 END) AS punt_gross_yards_sum
		,MAX(CASE WHEN stat_name IN ('Punting Yards') THEN Yards ELSE 0 END) - MAX(punt_return_yards) AS punt_net_yards_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punt Inside 20') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punts_inside_20
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punt With Touchback') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_touchbacks
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punt Return Yards','Punt Return Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_return_attempt
		,MAX(CASE WHEN stat_name IN ('Punt Return Yards','Punt Return Yards, TD') THEN Yards ELSE 0 END) AS punt_return_yards_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punt - Fair Catch') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_return_fair_catches
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Punt Return Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_return_touchdowns
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Kickoff Yards') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_attempts
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Kickoff Yards') AND kickoff_return_yards IS NOT NULL THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoffs_returned
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Kickoff With Touchback') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_touchbacks
		,MAX(CASE WHEN stat_name IN ('Kickoff Yards') AND kickoff_return_yards IS NOT NULL THEN kickoff_return_yards ELSE NULL END) AS kickoff_return_yards_allowed_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Kickoff Return Yards','Kickoff Return Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_return_attempts
		,MAX(CASE WHEN stat_name IN ('Kickoff Return Yards','Kickoff Return Yards, TD') THEN Yards ELSE 0 END) AS kickoff_return_yards_sum
		,CASE WHEN SUM(CASE WHEN stat_name IN ('Kickoff Return Yards, TD') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_return_touchdowns
		,CASE WHEN SUM(CASE WHEN STPlayType = 5 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_tackles
		,CASE WHEN SUM(CASE WHEN STPlayType = 5 AND stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS kickoff_assists
		,CASE WHEN SUM(CASE WHEN STPlayType = 3 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_tackles
		,CASE WHEN SUM(CASE WHEN STPlayType = 3 AND stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) >= 1 THEN 1 ELSE 0 END AS punt_assists
	INTO #temp_non_pro_player_play_special_teams_stats
	FROM daily_build_non_pro_play_stats ps
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON ps.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE is_no_play = 0
	GROUP BY ps.PlayerID
		,CONCAT(last_name,', ',goes_by)
		,season
		,ps.GameKey
		,ps.PlayID
	HAVING (SUM(CASE WHEN stat_name IN ('Field Goal Yards','Field Goal Missed Yards','Field Goal Blocked (Offense)','Extra Point - Blocked','Extra Point - Failed','Extra Point - Good') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Punting Yards','Punt Blocked (Offense)') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Punt Inside 20') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Punt With Touchback') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Punt Return Yards','Punt Return Yards, TD') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Punt - Fair Catch') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Kickoff Yards') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Kickoff With Touchback') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN stat_name IN ('Kickoff Return Yards','Kickoff Return Yards, TD') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN STPlayType = 5 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN STPlayType = 5 AND stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN STPlayType = 3 AND stat_name IN ('1/2 Tackle','1/2 Tackle for a Loss','Solo Tackle','Assisted Tackle','Tackle for a Loss') THEN 1 ELSE 0 END) > 0
		OR SUM(CASE WHEN STPlayType = 3 AND stat_name IN ('Tackle Assist') THEN 1 ELSE 0 END) > 0)


	INSERT INTO #temp_bane_college_player_special_teams_stats
	SELECT gsis_player_id
		,player
		,season
		,gsis_game_key
		,NULL AS play_count_sum
		,SUM(kick_attempts) AS kick_attempts
		,SUM(kick_makes) AS kick_makes
		,SUM(kick_blocks) AS kick_blocks
		,SUM(field_goal_attempts) AS field_goal_attempts
		,SUM(field_goal_makes) AS field_goal_makes
		,SUM(field_goal_blocks) AS field_goal_blocks
		,SUM(extra_point_attempts) AS extra_point_attempts
		,SUM(extra_point_makes) AS extra_point_makes
		,SUM(extra_point_blocks) AS extra_point_blocks
		,SUM(attempts_0_19) AS attempts_0_19
		,SUM(attempts_20_29) AS attempts_20_29
		,SUM(attempts_30_39) AS attempts_30_39
		,SUM(attempts_40_49) AS attempts_40_49
		,SUM(attempts_50_59) AS attempts_50_59
		,SUM(attempts_60_plus) AS attempts_60_plus
		,SUM(makes_0_19) AS makes_0_19
		,SUM(makes_20_29) AS makes_20_29
		,SUM(makes_30_39) AS makes_30_39
		,SUM(makes_40_49) AS makes_40_49
		,SUM(makes_50_59) AS makes_50_59
		,SUM(makes_60_plus) AS makes_60_plus
		,SUM(punt_attempts) AS punt_attempts
		,SUM(punt_gross_yards_sum) AS punt_gross_yards_sum
		,SUM(punt_net_yards_sum) AS punt_net_yards_sum
		,SUM(punts_inside_20) AS punts_inside_20
		,NULL AS punts_inside_10
		,SUM(punt_touchbacks) AS punt_touchbacks
		,NULL AS punt_fair_catches
		,SUM(punt_return_attempt) AS punt_return_attempt
		,SUM(punt_return_yards_sum) AS punt_return_yards_sum
		,SUM(punt_return_fair_catches) AS punt_return_fair_catches
		,SUM(punt_return_touchdowns) AS punt_return_touchdowns
		,SUM(kickoff_attempts) AS kickoff_attempts
		,SUM(kickoffs_returned) AS kickoffs_returned
		,SUM(kickoff_touchbacks) AS kickoff_touchbacks
		,SUM(kickoff_return_yards_allowed_sum) AS kickoff_return_yards_allowed_sum
		,SUM(kickoff_return_attempts) AS kickoff_return_attempts
		,SUM(kickoff_return_yards_sum) AS kickoff_return_yards_sum
		,SUM(kickoff_return_touchdowns) AS kickoff_return_touchdowns
		,SUM(kickoff_tackles) AS kickoff_tackles
		,SUM(kickoff_assists) AS kickoff_assists
		,NULL AS kickoff_missed_tackles
		,SUM(punt_tackles) AS punt_tackles
		,SUM(punt_assists) AS punt_assists
		,NULL AS punt_missed_tackles
		,GETDATE() AS updated_at
	FROM #temp_non_pro_player_play_special_teams_stats
	GROUP BY gsis_player_id
		,player
		,season
		,gsis_game_key


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(9)(b)

	
	Add in stats from NonProDB - game level.

	This one is a little more involved than the previous ones.  All the different special teams stats are in different tables (Kicking, Returning, etc.) so you have
	to create a temp table first that you can add columns from all the tables into, then sum them all up by player and game at the end - because some players will
	have stats in more than one of the tables in a given game.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_combine_special_teams exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_combine_special_teams') IS NOT NULL
		DROP TABLE #temp_combine_special_teams

	CREATE TABLE #temp_combine_special_teams
	(gsis_player_ID INT
	,season INT
	,gsis_game_key INT
	,kick_attempts INT
	,kick_makes INT
	,kick_blocks INT
	,field_goal_attempts INT
	,field_goal_makes INT
	,field_goal_blocks INT
	,extra_point_attempts INT
	,extra_point_makes INT
	,extra_point_blocks INT
	,punt_attempts INT
	,punt_gross_yards_sum INT
	,punt_net_yards_sum INT
	,punts_inside_20 INT
	,punt_touchbacks INT
	,punt_return_attempt INT
	,punt_return_yards_sum INT
	,punt_return_fair_catches INT
	,punt_return_touchdowns INT
	,kickoff_attempts INT
	,kickoffs_returned INT
	,kickoff_touchbacks INT
	,kickoff_return_yards_allowed_sum INT
	,kickoff_return_attempts INT
	,kickoff_return_yards_sum INT
	,kickoff_return_touchdowns INT
	,kickoff_tackles INT
	,kickoff_assists INT
	)
	

--Add placekicking
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,FGMissed + FGMade + FGBlocked + XPMissed + XPMade + XPBlocked AS kick_attempts
		,FGMade + XPMade AS kick_makes
		,FGBlocked + XPBlocked AS kick_blocks
		,FGMissed + FGMade + FGBlocked AS field_goal_attempts
		,FGMade AS field_goal_makes
		,FGBlocked AS field_goal_blocks
		,XPMissed + XPMade + XPBlocked AS extra_point_attempts
		,XPMade AS extra_point_makes
		,XPBlocked AS extra_point_blocks
		,NULL AS punt_attempts
		,NULL AS punt_gross_yards_sum
		,NULL AS punt_net_yards_sum
		,NULL AS punts_inside_20
		,NULL AS punt_touchbacks
		,NULL AS punt_return_attempt
		,NULL AS punt_return_yards_sum
		,NULL AS punt_return_fair_catches
		,NULL AS punt_return_touchdowns
		,NULL AS kickoff_attempts
		,NULL AS kickoffs_returned
		,NULL AS kickoff_touchbacks
		,NULL AS kickoff_return_yards_allowed_sum
		,NULL AS kickoff_return_attempts
		,NULL AS kickoff_return_yards_sum
		,NULL AS kickoff_return_touchdowns
		,NULL AS kickoff_tackles
		,NULL AS kickoff_assists
	FROM NonProDB.dbo.PlaceKicking de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND (de.FGMissed > 0 OR de.FGMade > 0 OR de.FGBlocked > 0 OR de.XPMissed > 0 OR de.XPMade > 0 OR de.XPBlocked > 0)
		AND ac.ClubKey IS NULL


--Add kickoffs
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS kick_attempts
		,NULL AS kick_makes
		,NULL AS kick_blocks
		,NULL AS field_goal_attempts
		,NULL AS field_goal_makes
		,NULL AS field_goal_blocks
		,NULL AS extra_point_attempts
		,NULL AS extra_point_makes
		,NULL AS extra_point_blocks
		,NULL AS punt_attempts
		,NULL AS punt_gross_yards_sum
		,NULL AS punt_net_yards_sum
		,NULL AS punts_inside_20
		,NULL AS punt_touchbacks
		,NULL AS punt_return_attempt
		,NULL AS punt_return_yards_sum
		,NULL AS punt_return_fair_catches
		,NULL AS punt_return_touchdowns
		,(Number) AS kickoff_attempts
		,(Number - Touchbacks) AS kickoffs_returned
		,(Touchbacks) AS kickoff_touchbacks
		,(ReturnYards) AS kickoff_return_yards_allowed_sum
		,NULL AS kickoff_return_attempts
		,NULL AS kickoff_return_yards_sum
		,NULL AS kickoff_return_touchdowns
		,NULL AS kickoff_tackles
		,NULL AS kickoff_assists
	FROM NonProDB.dbo.Kickoffs de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND de.Number > 0
		AND ac.ClubKey IS NULL


--Add punts
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS kick_attempts
		,NULL AS kick_makes
		,NULL AS kick_blocks
		,NULL AS field_goal_attempts
		,NULL AS field_goal_makes
		,NULL AS field_goal_blocks
		,NULL AS extra_point_attempts
		,NULL AS extra_point_makes
		,NULL AS extra_point_blocks
		,(Number) AS punt_attempts
		,(Yards) AS punt_gross_yards_sum
		,(Number * NetPuntingAverage) AS punt_net_yards_sum
		,(Inside20) AS punts_inside_20
		,(Touchbacks) AS punt_touchbacks
		,NULL AS punt_return_attempt
		,NULL AS punt_return_yards_sum
		,NULL AS punt_return_fair_catches
		,NULL AS punt_return_touchdowns
		,NULL AS kickoff_attempts
		,NULL AS kickoffs_returned
		,NULL AS kickoff_touchbacks
		,NULL AS kickoff_return_yards_allowed_sum
		,NULL AS kickoff_return_attempts
		,NULL AS kickoff_return_yards_sum
		,NULL AS kickoff_return_touchdowns
		,NULL AS kickoff_tackles
		,NULL AS kickoff_assists
	FROM NonProDB.dbo.Punting de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.PlayerID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND de.Number > 0
		AND ac.ClubKey IS NULL


--Add kickoff returns
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS kick_attempts
		,NULL AS kick_makes
		,NULL AS kick_blocks
		,NULL AS field_goal_attempts
		,NULL AS field_goal_makes
		,NULL AS field_goal_blocks
		,NULL AS extra_point_attempts
		,NULL AS extra_point_makes
		,NULL AS extra_point_blocks
		,NULL AS punt_attempts
		,NULL AS punt_gross_yards_sum
		,NULL AS punt_net_yards_sum
		,NULL AS punts_inside_20
		,NULL AS punt_touchbacks
		,NULL AS punt_return_attempt
		,NULL AS punt_return_yards_sum
		,NULL AS punt_return_fair_catches
		,NULL AS punt_return_touchdowns
		,NULL AS kickoff_attempts
		,NULL AS kickoffs_returned
		,NULL AS kickoff_touchbacks
		,NULL AS kickoff_return_yards_allowed_sum
		,(Number) AS kickoff_return_attempts
		,(Yards) AS kickoff_return_yards_sum
		,(Touchdowns) AS kickoff_return_touchdowns
		,NULL AS kickoff_tackles
		,NULL AS kickoff_assists
	FROM NonProDB.dbo.[Returns] de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND de.ReturnType = 2
		AND de.Number > 0
		AND ac.ClubKey IS NULL


--Add punt returns
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS kick_attempts
		,NULL AS kick_makes
		,NULL AS kick_blocks
		,NULL AS field_goal_attempts
		,NULL AS field_goal_makes
		,NULL AS field_goal_blocks
		,NULL AS extra_point_attempts
		,NULL AS extra_point_makes
		,NULL AS extra_point_blocks
		,NULL AS punt_attempts
		,NULL AS punt_gross_yards_sum
		,NULL AS punt_net_yards_sum
		,NULL AS punts_inside_20
		,NULL AS punt_touchbacks
		,(Number) AS punt_return_attempt
		,(Yards) AS punt_return_yards_sum
		,(FairCatches) AS punt_return_fair_catches
		,(Touchdowns) AS punt_return_touchdowns
		,NULL AS kickoff_attempts
		,NULL AS kickoffs_returned
		,NULL AS kickoff_touchbacks
		,NULL AS kickoff_return_yards_allowed_sum
		,NULL AS kickoff_return_attempts
		,NULL AS kickoff_return_yards_sum
		,NULL AS kickoff_return_touchdowns
		,NULL AS kickoff_tackles
		,NULL AS kickoff_assists
	FROM NonProDB.dbo.[Returns] de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND de.ReturnType = 3
		AND de.Number > 0
		AND ac.ClubKey IS NULL


--Add ST tackles
	INSERT INTO #temp_combine_special_teams
	SELECT de.PlayerID AS gsis_player_id
		,ga.season
		,de.GameKey AS gsis_game_key
		,NULL AS kick_attempts
		,NULL AS kick_makes
		,NULL AS kick_blocks
		,NULL AS field_goal_attempts
		,NULL AS field_goal_makes
		,NULL AS field_goal_blocks
		,NULL AS extra_point_attempts
		,NULL AS extra_point_makes
		,NULL AS extra_point_blocks
		,NULL AS punt_attempts
		,NULL AS punt_gross_yards_sum
		,NULL AS punt_net_yards_sum
		,NULL AS punts_inside_20
		,NULL AS punt_touchbacks
		,NULL AS punt_return_attempt
		,NULL AS punt_return_yards_sum
		,NULL AS punt_return_fair_catches
		,NULL AS punt_return_touchdowns
		,NULL AS kickoff_attempts
		,NULL AS kickoffs_returned
		,NULL AS kickoff_touchbacks
		,NULL AS kickoff_return_yards_allowed_sum
		,NULL AS kickoff_return_attempts
		,NULL AS kickoff_return_yards_sum
		,NULL AS kickoff_return_touchdowns
		,(STTackles) AS kickoff_tackles
		,(STAssists) AS kickoff_assists
	FROM NonProDB.dbo.Defensive de
	INNER JOIN NonProDB.dbo.Game ga
		ON de.GameKey = ga.GameKey
	LEFT JOIN #temp_non_pro_player_play_special_teams_stats np
		ON de.GameKey = np.gsis_game_key
		AND de.PlayerID = np.gsis_player_id
	LEFT JOIN #temp_cff_games cf
		ON de.GameKey = cf.gsis_game_id
	LEFT JOIN #temp_all_star_clubs ac
		ON de.ClubKey = ac.ClubKey
	WHERE np.gsis_game_key IS NULL
		AND cf.gsis_game_id IS NULL
		AND de.PlayerID NOT LIKE '%[^0-9]%'
		AND de.PlayerID NOT LIKE ''
		AND de.PlayerID IS NOT NULL
		AND de.PlayerID <> '0'
		AND (de.STTackles > 0 OR de.STAssists > 0)
		AND ac.ClubKey IS NULL


--Sum and insert into the table for Bane step
	INSERT INTO #temp_bane_college_player_special_teams_stats
		SELECT gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,season
		,gsis_game_key
		,NULL AS play_count_sum
		,SUM(kick_attempts) AS kick_attempts
		,SUM(kick_makes) AS kick_makes
		,SUM(kick_blocks) AS kick_blocks
		,SUM(field_goal_attempts) AS field_goal_attempts
		,SUM(field_goal_makes) AS field_goal_makes
		,SUM(field_goal_blocks) AS field_goal_blocks
		,SUM(extra_point_attempts) AS extra_point_attempts
		,SUM(extra_point_makes) AS extra_point_makes
		,SUM(extra_point_blocks) AS extra_point_blocks
		,NULL AS attempts_0_19
		,NULL AS attempts_20_29
		,NULL AS attempts_30_39
		,NULL AS attempts_40_49
		,NULL AS attempts_50_59
		,NULL AS attempts_60_plus
		,NULL AS makes_0_19
		,NULL AS makes_20_29
		,NULL AS makes_30_39
		,NULL AS makes_40_49
		,NULL AS makes_50_59
		,NULL AS makes_60_plus
		,SUM(punt_attempts) AS punt_attempts
		,SUM(punt_gross_yards_sum) AS punt_gross_yards_sum
		,SUM(punt_net_yards_sum) AS punt_net_yards_sum
		,SUM(punts_inside_20) AS punts_inside_20
		,NULL AS punts_inside_10
		,SUM(punt_touchbacks) AS punt_touchbacks
		,NULL AS punt_fair_catches
		,SUM(punt_return_attempt) AS punt_return_attempt
		,SUM(punt_return_yards_sum) AS punt_return_yards_sum
		,SUM(punt_return_fair_catches) AS punt_return_fair_catches
		,SUM(punt_return_touchdowns) AS punt_return_touchdowns
		,SUM(kickoff_attempts) AS kickoff_attempts
		,SUM(kickoffs_returned) AS kickoffs_returned
		,SUM(kickoff_touchbacks) AS kickoff_touchbacks
		,SUM(kickoff_return_yards_allowed_sum) AS kickoff_return_yards_allowed_sum
		,SUM(kickoff_return_attempts) AS kickoff_return_attempts
		,SUM(kickoff_return_yards_sum) AS kickoff_return_yards_sum
		,SUM(kickoff_return_touchdowns) AS kickoff_return_touchdowns
		,SUM(kickoff_tackles) AS kickoff_tackles
		,SUM(kickoff_assists) AS kickoff_assists
		,NULL AS kickoff_missed_tackles
		,NULL AS punt_tackles
		,NULL AS punt_assists
		,NULL AS punt_missed_tackles
		,GETDATE() AS updated_at
	FROM #temp_combine_special_teams de
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON de.gsis_player_ID = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	GROUP BY gsis_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by)
		,season
		,gsis_game_key


	DROP TABLE #temp_non_pro_player_play_special_teams_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(9)(c)

	
	Update/add to/delete from the Bane special teams table.

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--Update any rows that have changed
	UPDATE [bane_college_player_special_teams_stats]
	SET player = te.player
		,season = te.season
		,play_count_sum = te.play_count_sum
		,kick_attempts = te.kick_attempts
		,kick_makes = te.kick_makes
		,kick_blocks = te.kick_blocks
		,field_goal_attempts = te.field_goal_attempts
		,field_goal_makes = te.field_goal_makes
		,field_goal_blocks = te.field_goal_blocks
		,extra_point_attempts = te.extra_point_attempts
		,extra_point_makes = te.extra_point_makes
		,extra_point_blocks = te.extra_point_blocks
		,attempts_0_19 = te.attempts_0_19
		,attempts_20_29 = te.attempts_20_29
		,attempts_30_39 = te.attempts_30_39
		,attempts_40_49 = te.attempts_40_49
		,attempts_50_59 = te.attempts_50_59
		,attempts_60_plus = te.attempts_60_plus
		,makes_0_19 = te.makes_0_19
		,makes_20_29 = te.makes_20_29
		,makes_30_39 = te.makes_30_39
		,makes_40_49 = te.makes_40_49
		,makes_50_59 = te.makes_50_59
		,makes_60_plus = te.makes_60_plus
		,punt_attempts = te.punt_attempts
		,punt_gross_yards_sum = te.punt_gross_yards_sum
		,punt_net_yards_sum = te.punt_net_yards_sum
		,punts_inside_20 = te.punts_inside_20
		,punts_inside_10 = te.punts_inside_10
		,punt_touchbacks = te.punt_touchbacks
		,punt_fair_catches = te.punt_fair_catches
		,punt_return_attempt = te.punt_return_attempt
		,punt_return_yards_sum = te.punt_return_yards_sum
		,punt_return_fair_catches = te.punt_return_fair_catches
		,punt_return_touchdowns = te.punt_return_touchdowns
		,kickoff_attempts = te.kickoff_attempts
		,kickoffs_returned = te.kickoffs_returned
		,kickoff_touchbacks = te.kickoff_touchbacks
		,kickoff_return_yards_allowed_sum = te.kickoff_return_yards_allowed_sum
		,kickoff_return_attempts = te.kickoff_return_attempts
		,kickoff_return_yards_sum = te.kickoff_return_yards_sum
		,kickoff_return_touchdowns = te.kickoff_return_touchdowns
		,kickoff_tackles = te.kickoff_tackles
		,kickoff_assists = te.kickoff_assists
		,kickoff_missed_tackles = te.kickoff_missed_tackles
		,punt_tackles = te.punt_tackles
		,punt_assists = te.punt_assists
		,punt_missed_tackles = te.punt_missed_tackles
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_special_teams_stats te
	WHERE [bane_college_player_special_teams_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_special_teams_stats].gsis_game_key = te.gsis_game_key
		AND (ISNULL([bane_college_player_special_teams_stats].play_count_sum,0) <> ISNULL(te.play_count_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].kick_attempts,0) <> ISNULL(te.kick_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].kick_makes,0) <> ISNULL(te.kick_makes,0)
		OR ISNULL([bane_college_player_special_teams_stats].kick_blocks,0) <> ISNULL(te.kick_blocks,0)
		OR ISNULL([bane_college_player_special_teams_stats].field_goal_attempts,0) <> ISNULL(te.field_goal_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].field_goal_makes,0) <> ISNULL(te.field_goal_makes,0)
		OR ISNULL([bane_college_player_special_teams_stats].field_goal_blocks,0) <> ISNULL(te.field_goal_blocks,0)
		OR ISNULL([bane_college_player_special_teams_stats].extra_point_attempts,0) <> ISNULL(te.extra_point_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].extra_point_makes,0) <> ISNULL(te.extra_point_makes,0)
		OR ISNULL([bane_college_player_special_teams_stats].extra_point_blocks,0) <> ISNULL(te.extra_point_blocks,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_0_19,0) <> ISNULL(te.attempts_0_19,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_20_29,0) <> ISNULL(te.attempts_20_29,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_30_39,0) <> ISNULL(te.attempts_30_39,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_40_49,0) <> ISNULL(te.attempts_40_49,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_50_59,0) <> ISNULL(te.attempts_50_59,0)
		OR ISNULL([bane_college_player_special_teams_stats].attempts_60_plus,0) <> ISNULL(te.attempts_60_plus,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_0_19,0) <> ISNULL(te.makes_0_19,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_20_29,0) <> ISNULL(te.makes_20_29,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_30_39,0) <> ISNULL(te.makes_30_39,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_40_49,0) <> ISNULL(te.makes_40_49,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_50_59,0) <> ISNULL(te.makes_50_59,0)
		OR ISNULL([bane_college_player_special_teams_stats].makes_60_plus,0) <> ISNULL(te.makes_60_plus,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_attempts,0) <> ISNULL(te.punt_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_gross_yards_sum,0) <> ISNULL(te.punt_gross_yards_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_net_yards_sum,0) <> ISNULL(te.punt_net_yards_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].punts_inside_20,0) <> ISNULL(te.punts_inside_20,0)
		OR ISNULL([bane_college_player_special_teams_stats].punts_inside_10,0) <> ISNULL(te.punts_inside_10,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_touchbacks,0) <> ISNULL(te.punt_touchbacks,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_fair_catches,0) <> ISNULL(te.punt_fair_catches,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_return_attempt,0) <> ISNULL(te.punt_return_attempt,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_return_yards_sum,0) <> ISNULL(te.punt_return_yards_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_return_fair_catches,0) <> ISNULL(te.punt_return_fair_catches,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_return_touchdowns,0) <> ISNULL(te.punt_return_touchdowns,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_attempts,0) <> ISNULL(te.kickoff_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoffs_returned,0) <> ISNULL(te.kickoffs_returned,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_touchbacks,0) <> ISNULL(te.kickoff_touchbacks,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_return_yards_allowed_sum,0) <> ISNULL(te.kickoff_return_yards_allowed_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_return_attempts,0) <> ISNULL(te.kickoff_return_attempts,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_return_yards_sum,0) <> ISNULL(te.kickoff_return_yards_sum,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_return_touchdowns,0) <> ISNULL(te.kickoff_return_touchdowns,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_tackles,0) <> ISNULL(te.kickoff_tackles,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_assists,0) <> ISNULL(te.kickoff_assists,0)
		OR ISNULL([bane_college_player_special_teams_stats].kickoff_missed_tackles,0) <> ISNULL(te.kickoff_missed_tackles,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_tackles,0) <> ISNULL(te.punt_tackles,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_assists,0) <> ISNULL(te.punt_assists,0)
		OR ISNULL([bane_college_player_special_teams_stats].punt_missed_tackles,0) <> ISNULL(te.punt_missed_tackles,0)
		)


--Insert any new rows
	INSERT INTO [bane_college_player_special_teams_stats]
	SELECT te.gsis_player_id
		,te.player
		,te.season
		,te.gsis_game_key
		,te.play_count_sum
		,te.kick_attempts
		,te.kick_makes
		,te.kick_blocks
		,te.field_goal_attempts
		,te.field_goal_makes
		,te.field_goal_blocks
		,te.extra_point_attempts
		,te.extra_point_makes
		,te.extra_point_blocks
		,te.attempts_0_19
		,te.attempts_20_29
		,te.attempts_30_39
		,te.attempts_40_49
		,te.attempts_50_59
		,te.attempts_60_plus
		,te.makes_0_19
		,te.makes_20_29
		,te.makes_30_39
		,te.makes_40_49
		,te.makes_50_59
		,te.makes_60_plus
		,te.punt_attempts
		,te.punt_gross_yards_sum
		,te.punt_net_yards_sum
		,te.punts_inside_20
		,te.punts_inside_10
		,te.punt_touchbacks
		,te.punt_fair_catches
		,te.punt_return_attempt
		,te.punt_return_yards_sum
		,te.punt_return_fair_catches
		,te.punt_return_touchdowns
		,te.kickoff_attempts
		,te.kickoffs_returned
		,te.kickoff_touchbacks
		,te.kickoff_return_yards_allowed_sum
		,te.kickoff_return_attempts
		,te.kickoff_return_yards_sum
		,te.kickoff_return_touchdowns
		,te.updated_at
		,te.kickoff_tackles
		,te.kickoff_assists
		,te.kickoff_missed_tackles
		,te.punt_tackles
		,te.punt_assists
		,te.punt_missed_tackles
	FROM #temp_bane_college_player_special_teams_stats te
	LEFT JOIN [bane_college_player_special_teams_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_special_teams_stats]
	FROM [bane_college_player_special_teams_stats] ba
	LEFT JOIN #temp_bane_college_player_special_teams_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_special_teams_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(10)

	
	Penalty Stats (as of 09/2021)

    OUTPUT TABLES:            
		bane_college_player_penalty_stats

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_bane_college_player_penalty_stats exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_bane_college_player_penalty_stats') IS NOT NULL
		DROP TABLE #temp_bane_college_player_penalty_stats

	SELECT pen.gsis_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,season
		,gsis_game_key
		,SUM(penalty_any_pff) AS penalties
		,SUM(penalty_declined_pff) AS declined_penalties
		,SUM(penalty_offsetting_pff) AS offsetting_penalties
		,SUM(penalty_delay_of_game) AS delay_of_game
		,SUM(penalty_offsides) AS offsides
		,SUM(penalty_taunting) AS taunting
		,SUM(penalty_unnecessary_roughness) AS unnecessary_roughness
		,SUM(penalty_unsportsmanlike_conduct) AS unsportsmanlike_conduct
		,SUM(penalty_defensive_holding) AS holding_defense
		,SUM(penalty_defensive_pass_interference) AS defensive_pass_interference
		,SUM(penalty_encroachment) AS encroachment
		,SUM(penalty_facemask) AS facemask
		,SUM(penalty_horse_collar) AS horse_collar
		,SUM(penalty_illegal_contact) AS illegal_contact
		,SUM(penalty_illegal_use_of_hands) AS illegal_hands
		,SUM(penalty_neutral_zone_infraction) AS neutral_zone
		,SUM(penalty_roughing_the_passer) AS roughing_the_passer
		,SUM(penalty_chop_block) AS chop_block
		,SUM(penalty_clipping) AS clipping
		,SUM(penalty_crackback) AS crackback
		,SUM(penalty_false_start) AS false_start
		,SUM(penalty_illegal_blindside_block) AS blindside_block
		,SUM(penalty_illegal_block_above_waist) AS block_above_waist
		,SUM(penalty_illegal_formation) AS illegal_formation
		,SUM(penalty_illegal_forward_pass) AS illegal_forward_pass
		,SUM(penalty_illegal_motion) AS illegal_motion
		,SUM(penalty_illegal_procedure) AS illegal_procedure
		,SUM(penalty_illegal_shift) AS illegal_shift
		,SUM(penalty_illegal_substitution) AS illegal_substitution
		,SUM(penalty_ineligible_downfield_on_pass) AS ineligible_downfield
		,SUM(penalty_intentional_grounding) AS intentional_grounding
		,SUM(penalty_low_block) AS low_block
		,SUM(penalty_offensive_holding) AS holding_offense
		,SUM(penalty_offensive_pass_interference) AS offensive_pass_interference
		,SUM(penalty_tripping) AS tripping
		,SUM(penalty_twelve_men) AS twelve_men
		,SUM(drawn_penalty_pff) AS drawn_penalties
		,SUM(drawn_defensive_holding) AS drawn_holding_defense
		,SUM(drawn_defensive_pass_interference) AS drawn_defensive_pass_interference
		,SUM(drawn_illegal_contact) AS drawn_illegal_contact
		,SUM(drawn_offensive_holding) AS drawn_offensive_holding
		,SUM(drawn_offensive_pass_interference) AS drawn_offensive_pass_interference
		,GETDATE() AS updated_at
	INTO #temp_bane_college_player_penalty_stats
	FROM [college_player_play_penalty_facts] pen --The player penalty table
	INNER JOIN [college_play_ancillary_facts] an --The play ancillary table
		ON pen.pff_play_id = an.pff_play_id
	INNER JOIN [college_play_context_facts] co --The play context table
		ON pen.pff_play_id = co.pff_play_id
	INNER JOIN [college_play_type_facts] ty --The play type table
		ON pen.pff_play_id = ty.pff_play_id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON pen.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	WHERE 1 = 1
		AND season >= @iSeason
		--AND is_qb_kneel = 0
		--AND is_qb_spike = 0
		--AND is_lateral = 0
		AND is_two_point_conversion = 0
		AND pen.gsis_player_id <> 0
		AND gsis_game_key IS NOT NULL
		AND season_type <> 'AS'
	GROUP BY pen.gsis_player_id
		,CONCAT(last_name,', ',goes_by)
		,season
		,gsis_game_key


--Update any rows that have changed
	UPDATE [bane_college_player_penalty_stats]
	SET player = te.player
		,season = te.season
		,penalties = te.penalties
		,declined_penalties = te.declined_penalties
		,offsetting_penalties = te.offsetting_penalties
		,delay_of_game = te.delay_of_game
		,offsides = te.offsides
		,taunting = te.taunting
		,unnecessary_roughness = te.unnecessary_roughness
		,unsportsmanlike_conduct = te.unsportsmanlike_conduct
		,holding_defense = te.holding_defense
		,defensive_pass_interference = te.defensive_pass_interference
		,encroachment = te.encroachment
		,facemask = te.facemask
		,horse_collar = te.horse_collar
		,illegal_contact = te.illegal_contact 
		,illegal_hands = te.illegal_hands
		,neutral_zone = te.neutral_zone
		,roughing_the_passer = te.roughing_the_passer
		,chop_block = te.chop_block
		,clipping = te.clipping 
		,crackback = te.crackback
		,false_start = te.false_start
		,blindside_block = te.blindside_block
		,block_above_waist = te.block_above_waist
		,illegal_formation = te.illegal_formation
		,illegal_forward_pass = te.illegal_forward_pass
		,illegal_motion = te.illegal_motion
		,illegal_procedure = te.illegal_procedure
		,illegal_shift = te.illegal_shift
		,illegal_substitution = te.illegal_substitution
		,ineligible_downfield = te.ineligible_downfield
		,intentional_grounding = te.intentional_grounding
		,low_block = te.low_block
		,holding_offense = te.holding_offense
		,offensive_pass_interference = te.offensive_pass_interference
		,tripping = te.tripping
		,twelve_men = te.twelve_men
		,drawn_penalties = te.drawn_penalties
		,drawn_holding_defense = te.drawn_holding_defense
		,drawn_defensive_pass_interference = te.drawn_defensive_pass_interference
		,drawn_illegal_contact = te.drawn_illegal_contact
		,drawn_offensive_holding = te.drawn_offensive_holding
		,drawn_offensive_pass_interference = te.drawn_offensive_pass_interference
		,updated_at = te.updated_at
	FROM #temp_bane_college_player_penalty_stats te
	WHERE [bane_college_player_penalty_stats].gsis_player_id = te.gsis_player_id
		AND [bane_college_player_penalty_stats].gsis_game_key = te.gsis_game_key
		AND ([bane_college_player_penalty_stats].penalties <> te.penalties
		OR [bane_college_player_penalty_stats].declined_penalties <> te.declined_penalties
		OR [bane_college_player_penalty_stats].offsetting_penalties <> te.offsetting_penalties
		OR [bane_college_player_penalty_stats].delay_of_game <> te.delay_of_game
		OR [bane_college_player_penalty_stats].offsides <> te.offsides
		OR [bane_college_player_penalty_stats].taunting <> te.taunting
		OR [bane_college_player_penalty_stats].unnecessary_roughness <> te.unnecessary_roughness
		OR [bane_college_player_penalty_stats].unsportsmanlike_conduct <> te.unsportsmanlike_conduct
		OR [bane_college_player_penalty_stats].holding_defense <> te.holding_defense
		OR [bane_college_player_penalty_stats].defensive_pass_interference <> te.defensive_pass_interference
		OR [bane_college_player_penalty_stats].encroachment <> te.encroachment
		OR [bane_college_player_penalty_stats].facemask <> te.facemask
		OR [bane_college_player_penalty_stats].horse_collar <> te.horse_collar
		OR [bane_college_player_penalty_stats].illegal_contact <> te.illegal_contact 
		OR [bane_college_player_penalty_stats].illegal_hands <> te.illegal_hands
		OR [bane_college_player_penalty_stats].neutral_zone <> te.neutral_zone
		OR [bane_college_player_penalty_stats].roughing_the_passer <> te.roughing_the_passer
		OR [bane_college_player_penalty_stats].chop_block <> te.chop_block
		OR [bane_college_player_penalty_stats].clipping <> te.clipping 
		OR [bane_college_player_penalty_stats].crackback <> te.crackback
		OR [bane_college_player_penalty_stats].false_start <> te.false_start
		OR [bane_college_player_penalty_stats].blindside_block <> te.blindside_block
		OR [bane_college_player_penalty_stats].block_above_waist <> te.block_above_waist
		OR [bane_college_player_penalty_stats].illegal_formation <> te.illegal_formation
		OR [bane_college_player_penalty_stats].illegal_forward_pass <> te.illegal_forward_pass
		OR [bane_college_player_penalty_stats].illegal_motion <> te.illegal_motion
		OR [bane_college_player_penalty_stats].illegal_procedure <> te.illegal_procedure
		OR [bane_college_player_penalty_stats].illegal_shift <> te.illegal_shift
		OR [bane_college_player_penalty_stats].illegal_substitution <> te.illegal_substitution
		OR [bane_college_player_penalty_stats].ineligible_downfield <> te.ineligible_downfield
		OR [bane_college_player_penalty_stats].intentional_grounding <> te.intentional_grounding
		OR [bane_college_player_penalty_stats].low_block <> te.low_block
		OR [bane_college_player_penalty_stats].holding_offense <> te.holding_offense
		OR [bane_college_player_penalty_stats].offensive_pass_interference <> te.offensive_pass_interference
		OR [bane_college_player_penalty_stats].tripping <> te.tripping
		OR [bane_college_player_penalty_stats].twelve_men <> te.twelve_men
		OR [bane_college_player_penalty_stats].drawn_penalties <> te.drawn_penalties
		OR [bane_college_player_penalty_stats].drawn_holding_defense <> te.drawn_holding_defense
		OR [bane_college_player_penalty_stats].drawn_defensive_pass_interference <> te.drawn_defensive_pass_interference
		OR [bane_college_player_penalty_stats].drawn_illegal_contact <> te.drawn_illegal_contact
		OR [bane_college_player_penalty_stats].drawn_offensive_holding <> te.drawn_offensive_holding
		OR [bane_college_player_penalty_stats].drawn_offensive_pass_interference <> te.drawn_offensive_pass_interference
		)


--Insert any new rows
	INSERT INTO [bane_college_player_penalty_stats]
	SELECT te.*
	FROM #temp_bane_college_player_penalty_stats te
	LEFT JOIN [bane_college_player_penalty_stats] ba
		ON te.gsis_player_id = ba.gsis_player_id
		AND te.gsis_game_key = ba.gsis_game_key
	WHERE ba.gsis_player_id IS NULL


--Delete any no longer existing rows
	DELETE FROM [bane_college_player_penalty_stats]
	FROM [bane_college_player_penalty_stats] ba
	LEFT JOIN #temp_bane_college_player_penalty_stats te
		ON ba.gsis_player_id = te.gsis_player_id
		AND ba.gsis_game_key = te.gsis_game_key
	WHERE te.gsis_player_id IS NULL
		AND ba.season >= @iSeason


	DROP TABLE #temp_bane_college_player_penalty_stats


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)

	
	Game playtimes

	You have to do this one here in case there are any players showing up in the stat tables that don't appear in the game playtimes table.  They need a row
	in that table to show up on Bane.  Most should be in there from the sp_bane_college_player_game_playtimes, this is a just in case check to add any leftover.

    OUTPUT TABLES:            
		bane_college_player_game_playtimes

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(a)

	
	Blocking

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_blocking_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(b)

	
	Run defense

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_run_defense_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(c)

	
	Coverage

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_coverage_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Defensive] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(d)

	
	Pass rush

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_pass_rush_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Defensive] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(e)

	
	Receiving

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_receiving_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Receiving] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(f)

	
	Running

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_running_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Rushing] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(g)

	
	Tackling

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_tackling_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Defensive] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(h)

	
	Passing

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(sc.Club_ID,cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_passing_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN [bane_college_player_game_playtimes] cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [NonProDB].[dbo].[Passing] ns
		ON gr.gsis_player_id = ns.PlayerID
		AND gr.gsis_game_key = ns.GameKey
		AND ns.Clubkey NOT LIKE '%[^0-9]%'
		AND ns.PlayerID NOT LIKE '%[^0-9]%'
	LEFT JOIN [NonProDB].[dbo].[Club] sc
		ON ns.Clubkey = sc.ClubKey
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	(11)(i)

	
	Special teams

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	INSERT INTO [bane_college_player_game_playtimes]
	SELECT DISTINCT gr.gsis_player_id
		,pl.id AS bane_player_id
		,gr.gsis_game_key
		,COALESCE(cphs.ncaa_club_id,pls.ncaa_club_id) AS ncaa_club_id
		,gr.season
		,ga.Season_Type AS season_type
		,ga.[Week] AS [week]
		,0 AS snap_count_offense
		,0 AS snap_count_offense_team
		,0 AS snap_count_defense
		,0 AS snap_count_defense_team
		,0 AS snap_count_special_teams
		,0 AS snap_count_special_teams_team
		,0 AS snap_count_4_phase_team
		,0 AS snap_count_special_teams_weighted
		,0 AS snap_count_special_teams_weighted_team
		,0 AS snap_count_4_phase
		,0 AS snap_count_all
		,0 AS snap_count_od
		,0 AS snap_count_weighted
		,0 AS equivalent_games_no_weight
		,0 AS equivalent_games
		,0 AS equivalent_games_off_def
		,0 AS snap_count_offense_no_garbage
		,0 AS snap_count_offense_no_garbage_team
		,0 AS snap_count_defense_no_garbage
		,0 AS snap_count_defense_no_garbage_team
		,0 AS snap_count_4_phase_no_garbage
		,0 AS snap_count_4_phase_no_garbage_team
		,0 AS snap_count_offense_no_garbage_inj_team
		,0 AS snap_count_defense_no_garbage_inj_team
		,0 AS snap_count_4_phase_no_garbage_inj_team
		,GETDATE() AS updated_at
		,'unknown' AS status_game_played
	FROM [bane_college_player_special_teams_stats] gr
	INNER JOIN [NonProDB].[dbo].[Game] ga
		ON gr.gsis_game_key = ga.GameKey
	LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON gr.gsis_player_id = pl.ncaa_gsis_id
		AND pl.is_deleted = 0
	LEFT JOIN bane_college_player_game_playtimes cp
		ON gr.gsis_game_key = cp.gsis_game_key
		AND gr.gsis_player_id = cp.gsis_player_id
	LEFT JOIN [BaneProductionAnalytics].dbo.college_play_histories cph
		ON pl.id = cph.player_id
		AND gr.season = cph.season
	LEFT JOIN [BaneProductionAnalytics].dbo.schools cphs
		ON cph.school_id = cphs.id
	LEFT JOIN [BaneProductionAnalytics].dbo.schools pls
		ON pl.ncaa_club_id = pls.id
	WHERE cp.gsis_game_key IS NULL
		AND gr.gsis_player_id not in (279281,329499,363527)




	RETURN @oReturnCD
		
END





GO


