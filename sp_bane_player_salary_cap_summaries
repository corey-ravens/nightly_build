USE [Analytics]
GO

/****** Object:  StoredProcedure [dbo].[sp_analysis_players_salary_cap]    Script Date: 5/11/2022 1:23:07 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO









ALTER PROCEDURE [dbo].[sp_analysis_players_salary_cap] (@iSeason INT, @oReturnCD INT OUTPUT) as

/*********************************************************************************

Procedure Name:	sp_stage_players_salary_cap
Author:			Corey Krawiec
Creation Date:	10/15/2019
Description:       

This program is for creating a player salary cap information table.


**Keep an eye on what happens to Fletcher Cox in the 2017 league year for future years. Once his guaranteed "option" bonus 
actually gets paid, is that getting double counted because it is in the "SB" field and the cap already earned field?
Also, does PotAccel increase once it is paid out? Because right now only the prorated initial signing bonus is in there (5.2
mil per year against the cap, and the 1.2 mil per year from the option bonus is not in there).

Maybe in addition to cap already earned, make a prorated cap already / not earned, and then you can take out unearned prorated from the 
SB field, and then once it is earned, you can take it out of the cap already earned because it is back in the prorated SB field**

Input Parameters:
	@iSeason		INT
	
Output Parameters:
	@oReturnCode	INT

Modifications:
Date		SE				Description
v2			Corey Krawiec	changes the future guaranteed money to a subselect.
v6			Corey Krawiec	you change the future guaranteed p5 for past looking years.
v7			Corey Krawiec	takes out the termination pay and makes roster bonus its own table so you can exclude it if it is already guaranteed
v8			Corey Krawiec	includes the offseason workout bonuses in dead money, also changes to ltbe minus already guaranteed money and adds traded dead money
v9			Corey Krawiec	takes out unpaid option bonus proration from the bonus_acceleration variable.
v10			Corey Krawiec	totally changes how you have been doing things. Using potAccel instead of your created bonus acceleration table.
v11			Corey Krawiec	takes out already paid future guaranteed money
v12			Corey Krawiec	adds in already paid roster bonus.
v13			Corey Krawiec	tried to use "earned" and "guaranteed" to get future dead money.
v14			Corey Krawiec	added "already accelerated dead money" to "dead money"
v15			Corey Krawiec	changes the order or variables and cleans up a bit
12/06/2016	Corey Krawiec	adds in retired players for dead money flag (v16)
12/17/2016	Corey Krawiec	adds the "active row" flag so you know which row to use for display (v17)
08/18/2017	Corey Krawiec	changes the where clause in the final step so it only gives rows where the cap season is >= the min season on the player's effective contract (v18)
08/25/2019	Corey Krawiec	updates the assumed retirement table to exclue players who come back
12/04/2019	Corey Krawiec	changes to_date to change date/from_date on the future guaranteed money table

**********************************************************************************/

begin 

	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table with the more specific cap distribution. So you can separate out option, roster, etc. bonuses.

	TEMP TABLES:
		#temp_cap_details
		
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_cap_details exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_details') IS NOT NULL
		DROP TABLE #temp_cap_details
		
	SELECT PlayerID AS nfl_player_id
		  ,Season AS season
		  ,ClubID AS nfl_club_id
		  ,FromDate AS from_date
		  ,ToDate AS to_date
		  ,[Off-Season] AS cap_details_offseason_bonus
		  ,[Option] AS cap_details_option_bonus
		  ,[Roster Bonus] AS cap_details_roster_bonus
		  ,[Salary Advance] AS cap_details_salary_advance
	INTO #temp_cap_details
	FROM (
	    SELECT PlayerID
			,Season
			,ClubID
			,FromDate
			,ToDate
			,SectionType
			,CapAmount  
	FROM ClubDB.dbo.CapDetails) up
	PIVOT (MAX(CapAmount) FOR SectionType IN ([Off-Season],[Option],[Roster Bonus],[Salary Advance])) AS pvt
	WHERE Season >= 2011
	ORDER BY PlayerID
		,Season
 /*
 SELECT *
 FROM #temp_cap_details_with_earned_guaranteed
 WHERE PLAYERID=28037
 ORDER BY season
 */


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table that notes early cash. Like Flacco in 2012, that cash was really for 2013 but was paid before end of league year.

	TEMP TABLES:
		#temp_early_cash

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_signing_bonus_lag exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_signing_bonus_lag') IS NOT NULL
		DROP TABLE #temp_signing_bonus_lag

	SELECT PlayerID AS nfl_player_id
		  ,cap.Season AS season
		  ,cap.Season + 1 AS season_to_move_cash_to
		  ,ClubID AS nfl_club_id
		  ,LAG(ClubID) OVER (PARTITION BY PlayerID, ClubID ORDER BY cap.Season, COALESCE(ToDate,'12/31/2099')) as nfl_club_id_previous
		  ,FromDate AS from_date
		  ,ToDate AS to_date
		  ,regular_season_end
		  ,LAG(CashSB_SB) OVER (PARTITION BY PlayerID, ClubID ORDER BY cap.Season, COALESCE(ToDate,'12/31/2099')) as signing_bonus_previous_record
		  ,CashSB_SB AS signing_bonus
		  ,LAG(CashSB_Option) OVER (PARTITION BY PlayerID, ClubID ORDER BY cap.Season, COALESCE(ToDate,'12/31/2099')) as option_bonus_previous_record
		  ,CashSB_Option AS option_bonus
		  ,LAG(CashLTBE_RB) OVER (PARTITION BY PlayerID, ClubID ORDER BY cap.Season, COALESCE(ToDate,'12/31/2099')) as roster_bonus_previous_record
		  ,CashLTBE_RB AS roster_bonus
	INTO #temp_signing_bonus_lag
	FROM ClubDB.dbo.CapRollup cap
	INNER JOIN map_nfl_league_year_dates ld
		ON cap.Season = ld.season
	WHERE cap.Season >= 2011
	ORDER BY PlayerID
		,Season

	-- Check if #temp_early_cash exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_early_cash') IS NOT NULL
		DROP TABLE #temp_early_cash

	SELECT nfl_player_id
		  ,season
		  ,season_to_move_cash_to
		  ,nfl_club_id
		  ,from_date
		  ,to_date
		  ,signing_bonus - signing_bonus_previous_record AS early_cash_signing_bonus
		  ,option_bonus - option_bonus_previous_record AS early_cash_option_bonus
		  ,roster_bonus - roster_bonus_previous_record AS early_cash_roster_bonus
	INTO #temp_early_cash
	FROM #temp_signing_bonus_lag
	WHERE from_date >= regular_season_end
		AND ((signing_bonus - signing_bonus_previous_record) > 0
			OR (option_bonus - option_bonus_previous_record) > 0
			OR (roster_bonus - roster_bonus_previous_record) > 0)
		AND nfl_club_id_previous = nfl_club_id

 /*
 SELECT *
 FROM #temp_signing_bonus_lag
 WHERE nfl_player_id = 37078
 ORDER BY nfl_club_id, Season, COALESCE(To_Date,'12/31/2099')
 */
		  
	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table that has cap money already earned.

	TEMP TABLES:
		#temp_cap_already_earned

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_contract_section_earned exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_contract_section_earned') IS NOT NULL
		DROP TABLE #temp_contract_section_earned

	SELECT PlayerID AS nfl_player_id
		  ,ClubID AS nfl_club_id
		  ,cd.Season AS season		  
		  ,FromDate AS from_date
		  ,SUM([Amount]) AS cap_already_earned
	INTO #temp_contract_section_earned
	FROM ClubDB.dbo.SectionYearEventRep sr
	INNER JOIN ClubDB.dbo.CapDetails cd
		ON sr.SectionID = cd.SectionID
		AND sr.Season = cd.Season
	WHERE COALESCE(EventDate,CalculatedEventDate) <= GETDATE()
		AND sr.Season >= 2011
	GROUP BY PlayerID
		,ClubID
		,cd.Season
		,FromDate

	-- Check if #temp_cap_already_earned exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_already_earned') IS NOT NULL
		DROP TABLE #temp_cap_already_earned

	SELECT nfl_player_id
		  ,nfl_club_id
		  ,season		  
		  ,from_date
		  ,LEAD(from_date) OVER (PARTITION BY nfl_player_id, nfl_club_id, season ORDER BY from_date) AS to_date
		  ,(SELECT SUM(cap_already_earned)
		      FROM #temp_contract_section_earned cs2
			 WHERE cs2.nfl_player_id = cs1.nfl_player_id
			   AND cs2.nfl_club_id = cs1.nfl_club_id
			   AND cs2.season = cs1.season
			   AND cs2.from_date >= cs1.from_date) 
		    AS cap_already_earned
	INTO #temp_cap_already_earned
	FROM #temp_contract_section_earned cs1

 /*
 SELECT *
 FROM #temp_contract_section_earned
 WHERE nfl_player_id = 38590
 ORDER BY nfl_club_id, Season
 */


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table that has future guaranteed cap money.

	TEMP TABLES:
	#temp_future_guaranteed_money

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	DECLARE @gSeason INT
	SELECT @gSeason = (SELECT MAX(season) FROM map_nfl_league_year_dates WHERE GETDATE() >= league_year_start)

	-- Check if #temp_cap_guarantee exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_guarantee') IS NOT NULL
		DROP TABLE #temp_cap_guarantee

	SELECT *
	INTO #temp_cap_guarantee
	FROM ClubDB.dbo.CapGuarantee cg
	WHERE Effective = 1
		AND ChangingSectionID = 0 --as of 03/2021 it looks like if this isn't 0 then its a duplicate guarantee row denoting some other change
		AND NOT (Season < @gSeason AND ToDate IS NULL)
	ORDER BY ChangeDate, season, SectionID 


	-- Check if #temp_guaranteed_minus_earned exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_guaranteed_minus_earned') IS NOT NULL
		DROP TABLE #temp_guaranteed_minus_earned

	SELECT PlayerID AS nfl_player_id
	      ,cg.Season AS season
		  ,ClubID AS nfl_club_id
		  ,cg.ContractID AS nfl_contract_id
		  ,cg.SectionID AS section_id
		  ,ChangeDate AS from_date
		  ,ToDate AS to_date
		  ,CASE WHEN COALESCE(Amount,0) >= Guar_Cap THEN 0 ELSE Guar_Cap - COALESCE(Amount,0) END AS guaranteed_cap
	INTO #temp_guaranteed_minus_earned
	FROM #temp_cap_guarantee cg
	LEFT JOIN ClubDB.dbo.SectionYearEventRep sr
		ON cg.SectionID = sr.SectionID
		AND cg.Season = sr.Season
		AND sr.CalculatedEventDate <= cg.CalculatedEventDate
	WHERE cg.Season >= 2011
		AND cg.Guar_Cap - COALESCE(Amount,0) > 0


	-- Check if #temp_guarantees_date_ranges exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_guarantees_date_ranges') IS NOT NULL
		DROP TABLE #temp_guarantees_date_ranges

	SELECT nfl_player_id
	      ,season
		  ,nfl_club_id
		  ,nfl_contract_id
		  ,section_id
		  ,guaranteed_cap
		  ,MIN(from_date) AS from_date
		  ,MAX(COALESCE(to_date,'12/31/2099')) AS to_date
	INTO #temp_guarantees_date_ranges
	FROM #temp_guaranteed_minus_earned
	GROUP BY nfl_player_id
	      ,season
		  ,nfl_club_id
		  ,nfl_contract_id
		  ,section_id
		  ,guaranteed_cap


	-- Check if #temp_cap_date_ranges exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_date_ranges') IS NOT NULL
		DROP TABLE #temp_cap_date_ranges

	SELECT PlayerID AS nfl_player_id
		,ClubID AS nfl_club_id
		,Season
		,MIN(FromDate) AS from_date
		,MAX(ISNULL(ToDate,'12/31/2099')) AS to_date
	INTO #temp_cap_date_ranges
	FROM ClubDB.dbo.CapRollup
	WHERE NOT (Season < @gSeason AND ToDate IS NULL)
	GROUP BY PlayerID
		,ClubID
		,Season


	-- Check if #temp_cap_and_guarantees exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_and_guarantees') IS NOT NULL
		DROP TABLE #temp_cap_and_guarantees

	SELECT gu.nfl_player_id
		,gu.season
		,gu.nfl_club_id
		,gu.nfl_contract_id
		,gu.guaranteed_cap
		,gu.from_date AS from_date_guarantee
		,gu.to_date AS to_date_guarantee
		,ca.from_date AS from_date_cap
		,ca.to_date AS to_date_cap
	INTO #temp_cap_and_guarantees
	FROM #temp_guarantees_date_ranges gu
	INNER JOIN #temp_cap_date_ranges ca
		ON gu.nfl_player_id = ca.nfl_player_id
		AND gu.season = ca.season
		AND gu.nfl_club_id = ca.nfl_club_id
		AND gu.to_date = ca.to_date
		AND gu.from_date >= ca.from_date
	ORDER BY gu.season
		,gu.from_date


	-- Check if #temp_future_guaranteed_money exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_future_guaranteed_money') IS NOT NULL
		DROP TABLE #temp_future_guaranteed_money

	SELECT DISTINCT nfl_player_id --DISTINCT because in the previous step you split it out by guarantee date, now you are adding everything within the cap window so you might have multiple rows with same cap window
	      ,season
		  ,nfl_club_id
		  ,from_date_cap
		  ,to_date_cap
		  ,(SELECT SUM(guaranteed_cap)
			FROM #temp_cap_and_guarantees cg2
			WHERE cg2.nfl_player_id = cg1.nfl_player_id
				AND cg2.nfl_club_id = cg1.nfl_club_id
				AND cg2.nfl_contract_id = cg1.nfl_contract_id
				AND cg2.season >= cg1.season
				AND COALESCE(cg2.from_date_cap,'12/31/2099') >= COALESCE(cg1.from_date_cap,'12/31/2099')
				AND COALESCE(cg2.to_date_cap,'12/31/2099') = COALESCE(cg1.to_date_cap,'12/31/2099')
				AND CASE WHEN cg2.season >= @gSeason THEN GETDATE() ELSE CONCAT('01/01/',Season + 1) END >= COALESCE(cg2.from_date_guarantee,'12/31/2099')
				)
		    AS future_guaranteed_money
	INTO #temp_future_guaranteed_money
	FROM #temp_cap_and_guarantees cg1

/*
SELECT *
FROM #temp_future_guaranteed_money
WHERE nfl_player_id = 43295
*/


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table that notes already accelerated bonus money that will go in dead money.

	TEMP TABLES:
		#temp_accelerated_misc
		#temp_already_accelerated_dead_money

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_accelerated_misc exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_accelerated_misc') IS NOT NULL
		DROP TABLE #temp_accelerated_misc

	SELECT PlayerID AS nfl_player_id
		  ,Season AS season
		  ,ClubID AS nfl_club_id
		  ,FromDate AS from_date
		  ,SUM(CapAmount) AS already_accelerated_dead_money
	INTO #temp_accelerated_misc
	FROM ClubDB.dbo.CapDetails cap
	WHERE cap.Season >= 2011
		AND Category = 'Misc'
		AND Accelerated = 1
	GROUP BY PlayerID
		,Season
		,ClubID
		,FromDate
 /*
 SELECT *
 FROM #temp_already_accelerated_dead_money
 WHERE nfl_player_id = 37111
 */
 
	-- Check if #temp_already_accelerated_dead_money exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_already_accelerated_dead_money') IS NOT NULL
		DROP TABLE #temp_already_accelerated_dead_money

	SELECT nfl_player_id
		  ,nfl_club_id
		  ,season
		  ,from_date
		  ,LEAD(from_date) OVER (PARTITION BY nfl_player_id, nfl_club_id, season ORDER BY from_date) AS to_date
		  ,(SELECT SUM(already_accelerated_dead_money)
		      FROM #temp_accelerated_misc cs2
			 WHERE cs2.nfl_player_id = cs1.nfl_player_id
			   AND cs2.nfl_club_id = cs1.nfl_club_id
			   AND cs2.season = cs1.season
			   AND cs2.from_date >= cs1.from_date) 
		    AS already_accelerated_dead_money
	  INTO #temp_already_accelerated_dead_money
	  FROM #temp_accelerated_misc cs1


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table that notes the last season a player played before retiring.

	First do a three step process to find "assumed retirements" where you find if someone has been a free agent for 500 days, then look to see if they were reactivated after
	a hiatus and if not, assume retirement.  Append that to a list of players who have filed retirement papers and take the highest season as their retirement season.

	TEMP TABLES:
		#temp_fa_500_days -> #temp_fa_500_days_last_active -> #temp_retirement_assumed 
		#temp_retirement_filed -> #temp_active_after_retiring -> #temp_last_retirement_filed
		#temp_retirement_assumed + #temp_last_retirement_filed = #temp_last_season_before_retirement

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_fa_500_days exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_fa_500_days') IS NOT NULL
		DROP TABLE #temp_fa_500_days

	SELECT nfl_player_id
		,MIN(season) as last_season_before_retirement
	INTO #temp_fa_500_days
	FROM analysis_players_gameweek_status gws
	WHERE status_roster_simple = 'FREEAGENT'
		AND DATEDIFF(DD,status_start_date,status_end_date) > 500
	GROUP BY nfl_player_id


	-- Check if #temp_fa_500_days_last_active exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_fa_500_days_last_active') IS NOT NULL
		DROP TABLE #temp_fa_500_days_last_active

	SELECT gws.nfl_player_id
		,MIN(season) as last_season_active
	INTO #temp_fa_500_days_last_active
	FROM analysis_players_gameweek_status gws
	INNER JOIN #temp_fa_500_days dy
		ON gws.nfl_player_id = dy.nfl_player_id
		AND gws.season > dy.last_season_before_retirement
	WHERE status_roster_simple = 'ACTIVE'
	GROUP BY gws.nfl_player_id

	-- Check if #temp_retirement_assumed exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_retirement_assumed') IS NOT NULL
		DROP TABLE #temp_retirement_assumed

	SELECT dy.nfl_player_id
		,dy.last_season_before_retirement
	INTO #temp_retirement_assumed
	FROM #temp_fa_500_days dy
	LEFT JOIN #temp_fa_500_days_last_active la
		ON dy.nfl_player_id = la.nfl_player_id
	WHERE dy.last_season_before_retirement >= ISNULL(la.last_season_active,0)



	-- Check if #temp_retirement_filed exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_retirement_filed') IS NOT NULL
		DROP TABLE #temp_retirement_filed

	SELECT nfl_player_id
		,MIN(season) - 1 AS last_season_before_retirement
	INTO #temp_retirement_filed
	FROM analysis_players_gameweek_status gs1
	WHERE status_roster_simple = 'RETIRED'
	GROUP BY nfl_player_id

	-- Check if #temp_active_after_retiring exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_active_after_retiring') IS NOT NULL
		DROP TABLE #temp_active_after_retiring

	SELECT gws.nfl_player_id
		,MIN(season) as last_season_active
	INTO #temp_active_after_retiring
	FROM analysis_players_gameweek_status gws
	INNER JOIN #temp_retirement_filed dy
		ON gws.nfl_player_id = dy.nfl_player_id
		AND gws.season > dy.last_season_before_retirement
	WHERE status_roster_simple = 'ACTIVE'
	GROUP BY gws.nfl_player_id

	-- Check if #temp_last_retirement_filed exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_last_retirement_filed') IS NOT NULL
		DROP TABLE #temp_last_retirement_filed

	SELECT dy.nfl_player_id
		,dy.last_season_before_retirement
	INTO #temp_last_retirement_filed
	FROM #temp_retirement_filed dy
	LEFT JOIN #temp_active_after_retiring la
		ON dy.nfl_player_id = la.nfl_player_id
	WHERE dy.last_season_before_retirement >= ISNULL(la.last_season_active,0)



	INSERT INTO #temp_last_retirement_filed
	SELECT * FROM #temp_retirement_assumed

	-- Check if #temp_last_season_before_retirement exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_last_season_before_retirement') IS NOT NULL
		DROP TABLE #temp_last_season_before_retirement

	SELECT nfl_player_id
		,MAX(last_season_before_retirement) as last_season_before_retirement
	INTO #temp_last_season_before_retirement
	FROM #temp_last_retirement_filed
	GROUP BY nfl_player_id


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table to note which is the "active" row to display.

	Cap Hits for the season "freeze" on January 1, so for previous seasons take the from_date closest to
	but not greater than Jan 1.

	TEMP TABLES:
		#temp_active_cap_row_prev_seasons

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_cap_rollup_with_jan_1 exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_cap_rollup_with_jan_1') IS NOT NULL
		DROP TABLE #temp_cap_rollup_with_jan_1

	SELECT ca.PlayerID AS nfl_player_id
	    ,ca.ClubID AS nfl_club_id
		,Season AS season
		,FromDate AS from_date
		,caprollupid
		,DATEDIFF(DD,FromDate,CONCAT('01/01/',Season + 1)) AS days_from_january_1
		,CASE WHEN ca.Season  >= ISNULL(cop.first_contract_year,co.first_contract_year) THEN 1 ELSE 0 END AS effective_contract_row
	INTO #temp_cap_rollup_with_jan_1
	FROM ClubDB.dbo.CapRollup ca
	LEFT JOIN analysis_players_contracts co
		ON ca.PlayerID = co.nfl_player_id
		AND co.effective_contract = 1
	LEFT JOIN analysis_players_contracts cop
		ON co.previous_nfl_contract_id = cop.nfl_contract_id
		AND cop.most_recent_new_money = 1
	WHERE DATEDIFF(DD,FromDate,CONCAT('01/01/',Season + 1)) >= 0


	-- Check if #temp_active_cap_row_prev_seasons exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_active_cap_row_prev_seasons') IS NOT NULL
		DROP TABLE #temp_active_cap_row_prev_seasons

	SELECT *
		,CASE WHEN RANK() OVER (PARTITION BY nfl_player_id, nfl_club_id, season ORDER BY days_from_january_1, caprollupid) = 1 THEN 1 ELSE 0 END AS active_row
	INTO #temp_active_cap_row_prev_seasons
	FROM #temp_cap_rollup_with_jan_1


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table with the nfl salary cap figures so you can get cap/cash numbers as a percent of the cap.

	OUTPUT TABLES:
	#temp_league_salary_cap

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_league_salary_cap exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_league_salary_cap') IS NOT NULL
		DROP TABLE #temp_league_salary_cap

	SELECT DISTINCT season
			,league_salary_cap
	INTO #temp_league_salary_cap
	FROM [BaneProductionAnalytics].[dbo].[league_salary_cap_summaries]

	
	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Create a table with a player's cap hit and dead money.

	Sandy's old SAS code added a day to the cap end date and then called the
	variable up_to_but_not_including. Below is the code if you want to change
	to that at some point.

	COALESCE(DATEADD(DAY,1, ToDate),'12/31/2088')

	The reason to include current year roster bonus in dead money calculation is that typically roster bonuses paid
	in first few days of the league year count on that year's cap. So if we are already date wise in the current league
	year, that bonus has likely already been paid, so it would be dead money.  May not be perfect but seems to work
	well for now. You also subtract out the "already guaranteed" roster bonus to avoid double counting.

	STAGING TABLES:
		stage_players_salary_cap

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	DECLARE @cap_season INT
	SELECT @cap_season = (SELECT MAX(season) FROM map_nfl_league_year_dates WHERE GETDATE() >= league_year_start)

	TRUNCATE TABLE analysis_players_salary_cap

	INSERT INTO analysis_players_salary_cap
		 (nfl_player_id
		  ,player
	      ,nfl_club_id
		  ,season
		  ,dead_money_flag
		  ,cap_amount
		  ,cash_amount
		  ,cap_paragraph_5
		  ,cash_paragraph_5
		  ,cap_signing_bonus
		  ,cash_signing_bonus
		  ,cap_likely_to_be_earned
		  ,cash_likely_to_be_earned_offseason
		  ,cash_likely_to_be_earned_other
		  ,cash_roster_bonus
		  ,cash_option_bonus
		  ,cap_details_offseason_bonus
		  ,cap_details_option_bonus
		  ,cap_details_roster_bonus
		  ,cap_miscellaneous
		  ,cap_potential_acceleration
		  ,cap_full_paragraph_5
		  ,cap_top_51_delta
		  ,from_date
		  ,to_date
		  ,dead_cap
		  ,cap_savings
		  ,dead_cap_post_june_1
		  ,cap_savings_post_june_1
		  ,dead_cap_trade
		  ,cap_savings_trade
		  ,active_row
		  ,cap_percentage
		  ,dead_cap_pre_june_1
		  ,cap_savings_pre_june_1
		  ,display_row
		  ,acquiring_team_cap_amount
		  ,dead_cap_trade_pre_june_1
		  ,dead_cap_trade_post_june_1
		  ,cap_savings_trade_pre_june_1
		  ,cap_savings_trade_post_june_1
		  )
	SELECT PlayerID AS nfl_player_id
		  ,CONCAT(last_name,', ',goes_by) AS player
	      ,ClubID AS nfl_club_id
		  ,cap.Season AS season
		  ,CASE WHEN CapAmt > 0 AND Cash = 0 AND cap.season >= 2002 AND Para5 = 0 THEN 1 
				WHEN cap.season >= @cap_season AND cap.ClubID <> (SELECT ClubID FROM ClubDB.dbo.PlayerExtract pe WHERE pe.PlayerID = cap.PlayerID) THEN 1
				WHEN cap.season > COALESCE(last_season_before_retirement,99999) THEN 1
				WHEN (CapAmt + Para5 + SB + LTBE + PotAccel) = 0 THEN 1
				ELSE 0
		   END AS dead_money_flag
		  ,COALESCE(CapAmt,0) AS cap_amount
		  ,COALESCE(Cash,0) 
			+ COALESCE(eca.early_cash_signing_bonus,0) - COALESCE(ecs.early_cash_signing_bonus,0)
			+ COALESCE(eca.early_cash_roster_bonus,0) - COALESCE(ecs.early_cash_roster_bonus,0)
			+ COALESCE(eca.early_cash_option_bonus,0) - COALESCE(ecs.early_cash_option_bonus,0)
		   AS cash_amount
		  ,COALESCE(Para5,0) AS cap_paragraph_5
		  ,COALESCE(CashP5,0) AS cash_paragraph_5
		  ,COALESCE(SB,0) AS cap_signing_bonus
		  ,COALESCE(CashSB_SB,0) AS cash_signing_bonus
		  ,COALESCE(LTBE,0) AS cap_likely_to_be_earned
		  ,COALESCE(CashLTBE_OffSeason,0) AS cash_likely_to_be_earned_offseason
		  ,COALESCE(CashLTBE_Other,0) AS cash_likely_to_be_earned_other
		  ,COALESCE(CashLTBE_RB,0) AS cash_roster_bonus
		  ,COALESCE(CashSB_Option,0) AS cash_option_bonus
		  ,COALESCE(cap_details_offseason_bonus,0) AS cap_details_offseason_bonus
		  ,COALESCE(cap_details_option_bonus,0) AS cap_details_option_bonus
		  ,COALESCE(cap_details_roster_bonus,0) AS cap_details_roster_bonus
		  ,COALESCE(Misc,0) AS cap_miscellaneous
		  ,COALESCE(PotAccel,0) AS cap_potential_acceleration
		  ,COALESCE(FullP5,0) AS cap_full_paragraph_5
		  ,COALESCE(Top51Delta,0) AS cap_top_51_delta
		  ,cap.FromDate AS from_date
		  ,cap.ToDate AS to_date
		  ,NULL AS dead_cap
		  ,NULL AS cap_savings
		  ,SB 
			+ COALESCE(future_guaranteed_money,0)
			--+ COALESCE(cap_already_earned,0)
			+ COALESCE(already_accelerated_dead_money,0)
			+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END
		   AS dead_cap_post_june_1
		  ,CapAmt 
			- (SB 
			+ COALESCE(future_guaranteed_money,0)
			--+ COALESCE(cap_already_earned,0)
			+ COALESCE(already_accelerated_dead_money,0)
			+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END)
		   AS cap_savings_post_june_1
		   ,NULL AS dead_cap_trade
		   ,NULL AS cap_savings_trade
/*		  
		  ,SB
			+ PotAccel
			--+ COALESCE(cap_already_earned,0)
			+ COALESCE(already_accelerated_dead_money,0)
			+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END 
		   AS dead_cap_trade
		  ,CapAmt 
			- (SB
			+ PotAccel
			--+ COALESCE(cap_already_earned,0)
			+ COALESCE(already_accelerated_dead_money,0)
			+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END) 
		   AS cap_savings_trade
*/
  		  ,CASE WHEN cap.Season > @cap_season OR (cap.Season = @cap_season AND MONTH(GETDATE()) >= 4) THEN CASE WHEN cap.ToDate IS NULL AND (CapAmt + Para5 + SB + LTBE + PotAccel) <> 0 THEN 1 ELSE 0 END
				ELSE CASE WHEN (CapAmt + Para5 + SB + LTBE + PotAccel) = 0 THEN 0 ELSE COALESCE(act.active_row,0) END --Coalesce to 0 for players who have a row in the table for a previous/current season with a from date after Jan 1, cause active row is null for them
		   END AS active_row
		   ,COALESCE(CapAmt,0) / NULLIF(nfl.league_salary_cap,0) AS cap_percentage
		  ,CASE WHEN CashSB_Option > 0 THEN SB 
					+ PotAccel 
					+ COALESCE(future_guaranteed_money,0) 
					--+ COALESCE(cap_already_earned,0) 
					--- COALESCE(cap_details_option_bonus,0)
					+ COALESCE(already_accelerated_dead_money,0)
					+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END									
				ELSE SB 
					+ PotAccel 
					+ COALESCE(future_guaranteed_money,0)
					--+ COALESCE(cap_already_earned,0)
					+ COALESCE(already_accelerated_dead_money,0)
					+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END
			END AS dead_cap_pre_june_1
			,CapAmt - (CASE WHEN CashSB_Option > 0 THEN SB 
							+ PotAccel 
							+ COALESCE(future_guaranteed_money,0) 
							--+ COALESCE(cap_already_earned,0) 
							--- COALESCE(cap_details_option_bonus,0)
							+ COALESCE(already_accelerated_dead_money,0)
							+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END
						  ELSE SB 
							+ PotAccel
							+ COALESCE(future_guaranteed_money,0)
							--+ COALESCE(cap_already_earned,0)
							+ COALESCE(already_accelerated_dead_money,0)
							+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END
					  END)
			AS cap_savings_pre_june_1
			,CASE WHEN cap.Season > @cap_season OR (cap.Season = @cap_season AND MONTH(GETDATE()) >= 4) THEN CASE WHEN cap.ToDate IS NULL AND (CapAmt + Para5 + SB + LTBE + PotAccel) <> 0 THEN 1 ELSE 0 END
				ELSE CASE WHEN (CapAmt + Para5 + SB + LTBE + PotAccel) = 0 THEN 0
						WHEN ISNULL(act.effective_contract_row,0) = 0 THEN 0 --is linked to an effective contract
						WHEN cap.ClubID <> cl.nfl_club_id THEN 0 --current team row
						WHEN CapAmt > 0 AND Cash = 0 AND cap.season >= 2002 AND Para5 = 0 THEN 0 --dead money flag 1
						WHEN cap.season >= @cap_season AND cap.ClubID <> (SELECT ClubID FROM ClubDB.dbo.PlayerExtract pe WHERE pe.PlayerID = cap.PlayerID) THEN 0 --dead money flag 2
						WHEN cap.season > COALESCE(last_season_before_retirement,99999) THEN 0 --dead money flag 3
						ELSE COALESCE(act.active_row,0) --Coalesce to 0 for players who have a row in the table for a previous/current season with a from date after Jan 1, cause active row is null for them
					END 
			END AS display_row
			,NULL AS acquiring_team_cap_amount
			,SB
				+ PotAccel
				--+ COALESCE(cap_already_earned,0)
				+ COALESCE(already_accelerated_dead_money,0)
				+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END 
			AS dead_cap_trade_pre_june_1
			,SB 
				--+ COALESCE(cap_already_earned,0)
				+ COALESCE(already_accelerated_dead_money,0)
				+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END
			AS dead_cap_trade_post_june_1
			,CapAmt 
				- (SB
				+ PotAccel
				--+ COALESCE(cap_already_earned,0)
				+ COALESCE(already_accelerated_dead_money,0)
				+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END) 
			AS cap_savings_trade_pre_june_1
			,CapAmt 
				- (SB 
				--+ COALESCE(cap_already_earned,0)
				+ COALESCE(already_accelerated_dead_money,0)
				+ CASE WHEN cap.season = @cap_season AND MONTH(GETDATE()) >= 6 THEN COALESCE(cap_details_offseason_bonus,0) ELSE 0 END)
			AS cap_savings_trade_post_june_1
	FROM ClubDB.dbo.CapRollup cap
	INNER JOIN map_nfl_league_year_dates da
		ON cap.season = da.season
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON cap.PlayerID = pl.nfl_id
		AND pl.is_deleted = 0
	LEFT JOIN BaneProductionAnalytics.dbo.clubs cl
		ON pl.current_club_id = cl.id
		AND cl.is_disabled = 0
	LEFT JOIN #temp_cap_details cd
		ON cd.nfl_player_id = cap.PlayerID
		AND cd.Season = cap.Season
		AND cd.nfl_club_id = cap.ClubID
		AND cd.from_date = cap.FromDate
		AND COALESCE(cd.to_date,'12/31/2099') = COALESCE(cap.ToDate,'12/31/2099')
	LEFT JOIN #temp_early_cash eca
		ON eca.nfl_player_id = cap.PlayerID
		AND eca.season_to_move_cash_to = cap.Season
		AND eca.nfl_club_id = cap.ClubID
	   --AND eca.from_date = cap.FromDate
		AND COALESCE(eca.to_date,'12/31/2099') =  COALESCE(cap.ToDate,'12/31/2099')
	LEFT JOIN #temp_early_cash ecs
		ON ecs.nfl_player_id = cap.PlayerID
		AND ecs.season = cap.Season
		AND ecs.nfl_club_id = cap.ClubID
	   --AND ecs.from_date = cap.FromDate
		AND COALESCE(ecs.to_date,'12/31/2099') =  COALESCE(cap.ToDate,'12/31/2099')
	LEFT JOIN #temp_cap_already_earned ae
		ON ae.nfl_player_id = cap.PlayerID
		AND ae.season = cap.Season
		AND ae.nfl_club_id = cap.ClubID
		AND cap.FromDate >= ae.from_date
		AND cap.FromDate < COALESCE(ae.to_date,'12/31/2099')
	LEFT JOIN #temp_future_guaranteed_money fg
		ON fg.nfl_player_id = cap.PlayerID
		AND fg.season = cap.Season
		AND fg.nfl_club_id = cap.ClubID
		AND cap.FromDate >= fg.from_date_cap
		AND COALESCE(cap.ToDate,'12/31/2099') <= COALESCE(fg.to_date_cap,'12/31/2099')
		AND fg.future_guaranteed_money > 0
	LEFT JOIN #temp_already_accelerated_dead_money aa
		ON aa.nfl_player_id = cap.PlayerID
		AND aa.season = cap.Season
		AND aa.nfl_club_id = cap.ClubID
		AND cap.FromDate >= aa.from_date
		AND cap.FromDate < COALESCE(aa.to_date,'12/31/2099')
	LEFT JOIN #temp_last_season_before_retirement ret
		ON ret.nfl_player_id = cap.PlayerID
	LEFT JOIN #temp_active_cap_row_prev_seasons act
		ON act.nfl_player_id = cap.PlayerID
	    AND act.nfl_club_id = cap.ClubID
	    AND act.season = cap.Season
	    AND act.from_date = cap.FromDate
	LEFT JOIN #temp_league_salary_cap nfl
		ON cap.Season = nfl.season
	WHERE 1=1
		--AND (cap.season >= (SELECT MIN(FirstContractYear) FROM ClubDB.dbo.ContractRep cr WHERE EffectiveContract = 1 AND cr.PlayerID = cap.PlayerID)
		--AND cap.season >= (SELECT MIN(FirstContractYear) FROM ClubDB.dbo.ContractRep WHERE EffectiveContract = 1)
		--OR (cap.season >= @cap_season AND CapAmt > 0 AND ((CapAmt > 0 AND Cash = 0 AND cap.season >= 2002 AND Para5 = 0)
				--OR (cap.season >= @cap_season AND cap.ClubID <> (SELECT ClubID FROM ClubDB.dbo.PlayerExtract pe WHERE pe.PlayerID = cap.PlayerID))
				--OR (cap.season > COALESCE(last_season_before_retirement,99999))
				--OR ((CapAmt + Para5 + SB + LTBE + PotAccel) = 0)
				--)
			--)
		AND cap.season >= 2007
		--AND (CapAmt + Para5 + SB + LTBE + PotAccel) <> 0
	   --AND cap.ToDate IS NULL
	ORDER BY PlayerID
		,ClubID
		,season
		,cap.FromDate


	--Fill in the current dead cap and cap savings based on if we are past June 1 or not
	UPDATE analysis_players_salary_cap
	SET dead_cap = CASE WHEN MONTH(GETDATE()) >= 6 THEN dead_cap_post_june_1 ELSE dead_cap_pre_june_1 END
		,cap_savings = CASE WHEN MONTH(GETDATE()) >= 6 THEN cap_savings_post_june_1 ELSE cap_savings_pre_june_1 END
		,dead_cap_trade = CASE WHEN MONTH(GETDATE()) >= 6 THEN dead_cap_trade_post_june_1 ELSE dead_cap_trade_pre_june_1 END
		,cap_savings_trade = CASE WHEN MONTH(GETDATE()) >= 6 THEN cap_savings_trade_post_june_1 ELSE cap_savings_trade_pre_june_1 END


	-- Rebuild the index
	--ALTER INDEX [ix_stage_players_salary_cap] ON [dbo].[stage_players_salary_cap] REBUILD WITH (SORT_IN_TEMPDB = OFF, ONLINE = ON)


	/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Update the cap table with the prorated cap that an "acquiring team" will take on.

	OUTPUT TABLES:
		analysis_players_salary_cap

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_team_game_weeks exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_team_game_weeks') IS NOT NULL
		DROP TABLE #temp_team_game_weeks

	SELECT cl.ClubID AS nfl_club_id
		,pg.[season]
		,[week]
	INTO #temp_team_game_weeks
	FROM [BaneProductionAnalytics].[dbo].[pro_games] pg
	INNER JOIN ProDB.dbo.Club cl
		ON pg.home_team_nfl_club_key = cl.ClubKey
	WHERE GETDATE() >= pg.[date]


	INSERT INTO #temp_team_game_weeks
	SELECT cl.ClubID AS nfl_club_id
		,pg.[season]
		,[week]
	FROM [BaneProductionAnalytics].[dbo].[pro_games] pg
	INNER JOIN ProDB.dbo.Club cl
		ON pg.away_team_nfl_club_key = cl.ClubKey
	WHERE GETDATE() >= pg.[date]


	-- Check if #temp_max_team_game_weeks exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_max_team_game_weeks') IS NOT NULL
		DROP TABLE #temp_max_team_game_weeks

	SELECT nfl_club_id
		,season
		,MAX([week]) AS [week]
	INTO #temp_max_team_game_weeks
	FROM #temp_team_game_weeks
	GROUP BY nfl_club_id
		,[season]


	-- Check if #temp_acquiring_caps exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_acquiring_caps') IS NOT NULL
		DROP TABLE #temp_acquiring_caps

	SELECT cs.nfl_player_id
		,cs.nfl_club_id
		,cs.season
		,cs.dead_money_flag
		,cs.active_row
	,CASE WHEN cs.season <= 2020 THEN ISNULL(CASE WHEN cap_amount < cash_paragraph_5 + cap_details_roster_bonus THEN cap_amount ELSE cash_paragraph_5 + cap_details_roster_bonus END,0) / 17 * (17 - [week] + 2)
		WHEN cs.season > 2020 THEN ISNULL(CASE WHEN cap_amount < cash_paragraph_5 + cap_details_roster_bonus THEN cap_amount ELSE cash_paragraph_5 + cap_details_roster_bonus END,0) / 18 * (18 - [week] + 2)
		ELSE CASE WHEN cap_amount < cash_paragraph_5 + cap_details_roster_bonus THEN cap_amount ELSE cash_paragraph_5 + cap_details_roster_bonus END
	END AS acquiring_team_cap_amount
	INTO #temp_acquiring_caps
	FROM analysis_players_salary_cap cs
	INNER JOIN #temp_max_team_game_weeks gw
		ON cs.nfl_club_id = gw.nfl_club_id
		AND cs.season = gw.season
	WHERE active_row = 1
		AND cs.season = @cap_season


	--Update the acquiring team cap acquiring_team_cap = acquiring_team_cap
	UPDATE analysis_players_salary_cap
		SET [acquiring_team_cap_amount]  = ac.acquiring_team_cap_amount
	FROM  #temp_acquiring_caps ac
	WHERE analysis_players_salary_cap.nfl_player_id = ac.nfl_player_id
		AND analysis_players_salary_cap.nfl_club_id = ac.nfl_club_id
		AND analysis_players_salary_cap.season = ac.season
		AND analysis_players_salary_cap.dead_money_flag = ac.dead_money_flag
		AND analysis_players_salary_cap.active_row = ac.active_row
			

	DROP TABLE #temp_team_game_weeks
	DROP TABLE #temp_max_team_game_weeks
	DROP TABLE #temp_acquiring_caps

	



	PROC_END:

		RETURN @oReturnCD  

END



GO


